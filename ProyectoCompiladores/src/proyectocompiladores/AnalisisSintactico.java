
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 20 02:33:00 CST 2018
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 20 02:33:00 CST 2018
  */
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\004\007\000\002\004\006\000\002\005\013\000\002\005" +
    "\012\000\002\006\010\000\002\006\007\000\002\007\006" +
    "\000\002\007\005\000\002\010\006\000\002\010\005\000" +
    "\002\011\006\000\002\011\005\000\002\012\010\000\002" +
    "\012\007\000\002\013\006\000\002\013\005\000\002\014" +
    "\010\000\002\014\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\014\004\010\007\023\010\011\020\021\025" +
    "\016\001\002\000\016\002\ufff7\004\ufff7\007\ufff7\010\ufff7" +
    "\020\ufff7\025\ufff7\001\002\000\016\002\ufff6\004\ufff6\007" +
    "\ufff6\010\ufff6\020\ufff6\025\ufff6\001\002\000\016\002\ufffe" +
    "\004\ufffe\007\ufffe\010\ufffe\020\ufffe\025\ufffe\001\002\000" +
    "\016\002\ufffd\004\ufffd\007\ufffd\010\ufffd\020\ufffd\025\ufffd" +
    "\001\002\000\004\027\071\001\002\000\004\027\064\001" +
    "\002\000\016\002\ufffb\004\ufffb\007\ufffb\010\ufffb\020\ufffb" +
    "\025\ufffb\001\002\000\016\002\ufff8\004\ufff8\007\ufff8\010" +
    "\ufff8\020\ufff8\025\ufff8\001\002\000\016\002\uffff\004\010" +
    "\007\023\010\011\020\021\025\016\001\002\000\016\002" +
    "\ufffc\004\ufffc\007\ufffc\010\ufffc\020\ufffc\025\ufffc\001\002" +
    "\000\012\005\044\013\046\014\043\016\045\001\002\000" +
    "\004\002\042\001\002\000\016\002\ufff9\004\ufff9\007\ufff9" +
    "\010\ufff9\020\ufff9\025\ufff9\001\002\000\006\011\035\012" +
    "\034\001\002\000\016\002\ufffa\004\ufffa\007\ufffa\010\ufffa" +
    "\020\ufffa\025\ufffa\001\002\000\004\027\024\001\002\000" +
    "\004\016\025\001\002\000\004\027\026\001\002\000\004" +
    "\006\027\001\002\000\004\022\030\001\002\000\004\023" +
    "\031\001\002\000\004\026\032\001\002\000\020\002\ufff2" +
    "\004\ufff2\007\ufff2\010\ufff2\020\ufff2\021\033\025\ufff2\001" +
    "\002\000\016\002\ufff3\004\ufff3\007\ufff3\010\ufff3\020\ufff3" +
    "\025\ufff3\001\002\000\004\026\040\001\002\000\004\026" +
    "\036\001\002\000\020\002\uffee\004\uffee\007\uffee\010\uffee" +
    "\020\uffee\021\037\025\uffee\001\002\000\016\002\uffef\004" +
    "\uffef\007\uffef\010\uffef\020\uffef\025\uffef\001\002\000\020" +
    "\002\uffec\004\uffec\007\uffec\010\uffec\020\uffec\021\041\025" +
    "\uffec\001\002\000\016\002\uffed\004\uffed\007\uffed\010\uffed" +
    "\020\uffed\025\uffed\001\002\000\004\002\001\001\002\000" +
    "\004\026\061\001\002\000\004\027\055\001\002\000\004" +
    "\027\051\001\002\000\004\026\047\001\002\000\020\002" +
    "\uffea\004\uffea\007\uffea\010\uffea\020\uffea\021\050\025\uffea" +
    "\001\002\000\016\002\uffeb\004\uffeb\007\uffeb\010\uffeb\020" +
    "\uffeb\025\uffeb\001\002\000\004\005\052\001\002\000\004" +
    "\030\053\001\002\000\020\002\uffe4\004\uffe4\007\uffe4\010" +
    "\uffe4\020\uffe4\021\054\025\uffe4\001\002\000\016\002\uffe5" +
    "\004\uffe5\007\uffe5\010\uffe5\020\uffe5\025\uffe5\001\002\000" +
    "\004\015\056\001\002\000\004\030\057\001\002\000\020" +
    "\002\uffe8\004\uffe8\007\uffe8\010\uffe8\020\uffe8\021\060\025" +
    "\uffe8\001\002\000\016\002\uffe9\004\uffe9\007\uffe9\010\uffe9" +
    "\020\uffe9\025\uffe9\001\002\000\020\002\uffe6\004\uffe6\007" +
    "\uffe6\010\uffe6\020\uffe6\021\062\025\uffe6\001\002\000\016" +
    "\002\uffe7\004\uffe7\007\uffe7\010\uffe7\020\uffe7\025\uffe7\001" +
    "\002\000\004\002\000\001\002\000\004\024\065\001\002" +
    "\000\004\017\066\001\002\000\004\024\067\001\002\000" +
    "\020\002\ufff0\004\ufff0\007\ufff0\010\ufff0\020\ufff0\021\070" +
    "\025\ufff0\001\002\000\016\002\ufff1\004\ufff1\007\ufff1\010" +
    "\ufff1\020\ufff1\025\ufff1\001\002\000\004\005\072\001\002" +
    "\000\004\026\073\001\002\000\020\002\ufff4\004\ufff4\007" +
    "\ufff4\010\ufff4\020\ufff4\021\074\025\ufff4\001\002\000\016" +
    "\002\ufff5\004\ufff5\007\ufff5\010\ufff5\020\ufff5\025\ufff5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\030\002\016\003\013\004\005\005\006\006" +
    "\014\007\011\010\021\011\017\012\012\013\003\014\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\062\003" +
    "\013\004\005\005\006\006\014\007\011\010\021\011\017" +
    "\012\012\013\003\014\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



//El c칩digo que vaya ac치 se va a poner en EjemploSintactico.java
@Override
    public void syntax_error(Symbol cur_token) {
        Tokens t = (Tokens)cur_token.value;
        done_parsing(); //Finaliza la ejecuci칩n al encontrar un error
        report_error("Error sint치ctico: [" + t.getRow() + ", " + t.getCol() + "]: " 
                +t.getLexema(), null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalisisSintactico$actions {
  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARARVARIABLES ::= TABS TIPODEDATO ESPBLANCO IDENTIFICADOR PCOMA 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(tdd.getLexema() + " " + id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARARVARIABLES ::= TABS TIPODEDATO ESPBLANCO IDENTIFICADOR PCOMA FINLINEA 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(tdd.getLexema() + " " + id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARPALCLAVVARIABLES ::= TABS PALCLAVVARIABLES DOSPUNTOS 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARPALCLAVVARIABLES ::= TABS PALCLAVVARIABLES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ABRIREXCEL ::= TABS IDENTIFICADOR ESPBLANCO ARCHIVOEXCEL PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(id.getLexema() + " " + ae.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ABRIREXCEL ::= TABS IDENTIFICADOR ESPBLANCO ARCHIVOEXCEL PCOMA FINLINEA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
        System.out.println(id.getLexema() + " " + ae.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARARCHIVOS ::= TABS PALCLAVARCHIVOS DOSPUNTOS 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARARCHIVOS ::= TABS PALCLAVARCHIVOS DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARMETODOS ::= TAB PALCLAVMETODOS DOSPUNTOS 
            {
              Object RESULT =null;
		int pcmleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcmright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcm = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcm.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARMETODOS",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARMETODOS ::= TAB PALCLAVMETODOS DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcmleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcmright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcm = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcm.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARMETODOS",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARPROPIEDADES ::= TAB PALCLAVPROPIEDADES DOSPUNTOS 
            {
              Object RESULT =null;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcp.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPROPIEDADES",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARPROPIEDADES ::= TAB PALCLAVPROPIEDADES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcp.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPROPIEDADES",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPORTARARCHIVOS ::= PALCLAVINCLUIR ESPBLANCO COMILLAS ARCHIVOLED COMILLAS 
            {
              Object RESULT =null;
		int pcileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pciright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pci = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int aledleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aledright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens aled = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pci.getLexema() + " " + c.getLexema() + aled.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTARARCHIVOS",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPORTARARCHIVOS ::= PALCLAVINCLUIR ESPBLANCO COMILLAS ARCHIVOLED COMILLAS FINLINEA 
            {
              Object RESULT =null;
		int pcileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int pciright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens pci = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int aledleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aledright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens aled = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
        System.out.println(pci.getLexema() + " " + c.getLexema() + aled.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTARARCHIVOS",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECFUNCIONPRIN ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO PALCLAVPRINCIPAL PARENABRE PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + pcp.getLexema() +
                pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCIONPRIN",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECFUNCIONPRIN ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO PALCLAVPRINCIPAL PARENABRE PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + pcp.getLexema() +
                pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCIONPRIN",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECCLASE ::= PALCLAVCLASE ESPBLANCO IDENTIFICADOR DOSPUNTOS 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcc.getLexema() + " " +id.getLexema() +dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCLASE",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECCLASE ::= PALCLAVCLASE ESPBLANCO IDENTIFICADOR DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcc.getLexema() + " " +id.getLexema() +dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCLASE",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= DECLARARVARIABLES 
            {
              Object RESULT =null;
		
        System.out.println("Declarando variables");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= DECLARPALCLAVVARIABLES 
            {
              Object RESULT =null;
		
        System.out.println("Abriendo inicio de declaraci칩n de variables");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= ABRIREXCEL 
            {
              Object RESULT =null;
		
        System.out.println("Abriendo excel");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= DECLARARCHIVOS 
            {
              Object RESULT =null;
		
        System.out.println("Declarando archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= DECLARMETODOS 
            {
              Object RESULT =null;
		
        System.out.println("Declarando m칠todos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= DECLARPROPIEDADES 
            {
              Object RESULT =null;
		
        System.out.println("Declarando propiedades");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= IMPORTARARCHIVOS 
            {
              Object RESULT =null;
		
        System.out.println("Incluyendo archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= DECFUNCIONPRIN 
            {
              Object RESULT =null;
		
        System.out.println("Declaraci칩n de funci칩n principal");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresion ::= DECCLASE 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println("Declaraci칩n de clase");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expresiones ::= expresion expresiones 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expresiones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

