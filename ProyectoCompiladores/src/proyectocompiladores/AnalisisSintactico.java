
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 21 17:44:27 CST 2018
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 21 17:44:27 CST 2018
  */
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\020\005" +
    "\000\002\020\006\000\002\021\005\000\002\021\003\000" +
    "\002\004\007\000\002\004\006\000\002\005\013\000\002" +
    "\005\012\000\002\006\010\000\002\006\007\000\002\007" +
    "\006\000\002\007\005\000\002\010\006\000\002\010\005" +
    "\000\002\011\006\000\002\011\005\000\002\011\006\000" +
    "\002\011\005\000\002\012\010\000\002\012\007\000\002" +
    "\012\010\000\002\012\006\000\002\012\005\000\002\013" +
    "\006\000\002\013\005\000\002\013\006\000\002\013\005" +
    "\000\002\014\010\000\002\014\007\000\002\014\010\000" +
    "\002\014\006\000\002\014\005\000\002\014\005\000\002" +
    "\015\012\000\002\015\011\000\002\015\014\000\002\015" +
    "\013\000\002\015\013\000\002\015\012\000\002\016\006" +
    "\000\002\016\005\000\002\016\006\000\002\016\005\000" +
    "\002\023\011\000\002\022\011\000\002\024\010\000\002" +
    "\024\007\000\002\025\006\000\002\025\005\000\002\027" +
    "\004\000\002\026\011\000\002\026\012\000\002\026\011" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\016\004\030\007\020\010\032\030\011\035" +
    "\007\037\012\001\002\000\004\002\230\001\002\000\020" +
    "\002\ufff4\004\ufff4\007\ufff4\010\ufff4\030\ufff4\035\ufff4\037" +
    "\ufff4\001\002\000\020\002\ufffc\004\ufffc\007\ufffc\010\ufffc" +
    "\030\ufffc\035\ufffc\037\ufffc\001\002\000\024\005\135\007" +
    "\136\013\127\014\131\015\126\016\133\020\132\021\134" +
    "\026\130\001\002\000\020\002\ufff9\004\ufff9\007\ufff9\010" +
    "\ufff9\030\ufff9\035\ufff9\037\ufff9\001\002\000\014\011\113" +
    "\012\111\013\112\014\107\015\110\001\002\000\006\005" +
    "\101\025\100\001\002\000\020\002\ufff6\004\ufff6\007\ufff6" +
    "\010\ufff6\030\ufff6\035\ufff6\037\ufff6\001\002\000\020\002" +
    "\uffff\004\030\007\020\010\032\030\011\035\007\037\012" +
    "\001\002\000\020\002\ufffa\004\ufffa\007\ufffa\010\ufffa\030" +
    "\ufffa\035\ufffa\037\ufffa\001\002\000\020\002\ufff3\004\ufff3" +
    "\007\ufff3\010\ufff3\030\ufff3\035\ufff3\037\ufff3\001\002\000" +
    "\020\002\ufff7\004\ufff7\007\ufff7\010\ufff7\030\ufff7\035\ufff7" +
    "\037\ufff7\001\002\000\004\037\044\001\002\000\020\002" +
    "\ufffe\004\ufffe\007\ufffe\010\ufffe\030\ufffe\035\ufffe\037\ufffe" +
    "\001\002\000\020\002\ufff5\004\ufff5\007\ufff5\010\ufff5\030" +
    "\ufff5\035\ufff5\037\ufff5\001\002\000\020\002\ufffb\004\ufffb" +
    "\007\ufffb\010\ufffb\030\ufffb\035\ufffb\037\ufffb\001\002\000" +
    "\020\002\ufffd\004\ufffd\007\ufffd\010\ufffd\030\ufffd\035\ufffd" +
    "\037\ufffd\001\002\000\020\002\ufff0\004\ufff0\007\ufff0\010" +
    "\ufff0\030\ufff0\035\ufff0\037\ufff0\001\002\000\020\002\ufff8" +
    "\004\ufff8\007\ufff8\010\ufff8\030\ufff8\035\ufff8\037\ufff8\001" +
    "\002\000\020\002\ufff2\004\ufff2\007\ufff2\010\ufff2\030\ufff2" +
    "\035\ufff2\037\ufff2\001\002\000\004\037\040\001\002\000" +
    "\020\002\ufff1\004\ufff1\007\ufff1\010\ufff1\030\ufff1\035\ufff1" +
    "\037\ufff1\001\002\000\004\037\033\001\002\000\004\034" +
    "\034\001\002\000\004\027\035\001\002\000\004\034\036" +
    "\001\002\000\022\002\uffe6\004\uffe6\007\uffe6\010\uffe6\030" +
    "\uffe6\031\037\035\uffe6\037\uffe6\001\002\000\020\002\uffe7" +
    "\004\uffe7\007\uffe7\010\uffe7\030\uffe7\035\uffe7\037\uffe7\001" +
    "\002\000\004\005\041\001\002\000\004\036\042\001\002" +
    "\000\022\002\uffea\004\uffea\007\uffea\010\uffea\030\uffea\031" +
    "\043\035\uffea\037\uffea\001\002\000\020\002\uffeb\004\uffeb" +
    "\007\uffeb\010\uffeb\030\uffeb\035\uffeb\037\uffeb\001\002\000" +
    "\004\026\045\001\002\000\004\037\046\001\002\000\006" +
    "\005\047\006\050\001\002\000\004\032\055\001\002\000" +
    "\004\032\051\001\002\000\004\033\052\001\002\000\004" +
    "\036\053\001\002\000\022\002\uffe8\004\uffe8\007\uffe8\010" +
    "\uffe8\030\uffe8\031\054\035\uffe8\037\uffe8\001\002\000\020" +
    "\002\uffe9\004\uffe9\007\uffe9\010\uffe9\030\uffe9\035\uffe9\037" +
    "\uffe9\001\002\000\010\026\060\033\061\037\062\001\002" +
    "\000\006\033\uffec\041\075\001\002\000\004\033\072\001" +
    "\002\000\004\037\070\001\002\000\004\036\066\001\002" +
    "\000\004\026\063\001\002\000\004\037\064\001\002\000" +
    "\004\005\065\001\002\000\006\033\uffee\041\uffee\001\002" +
    "\000\022\002\uffc9\004\uffc9\007\uffc9\010\uffc9\030\uffc9\031" +
    "\067\035\uffc9\037\uffc9\001\002\000\020\002\uffca\004\uffca" +
    "\007\uffca\010\uffca\030\uffca\035\uffca\037\uffca\001\002\000" +
    "\004\005\071\001\002\000\006\033\uffef\041\uffef\001\002" +
    "\000\004\036\073\001\002\000\022\002\uffcb\004\uffcb\007" +
    "\uffcb\010\uffcb\030\uffcb\031\074\035\uffcb\037\uffcb\001\002" +
    "\000\020\002\uffcc\004\uffcc\007\uffcc\010\uffcc\030\uffcc\035" +
    "\uffcc\037\uffcc\001\002\000\006\026\060\037\062\001\002" +
    "\000\004\033\uffed\001\002\000\004\002\000\001\002\000" +
    "\004\040\105\001\002\000\006\040\103\041\102\001\002" +
    "\000\020\002\uffcf\004\uffcf\007\uffcf\010\uffcf\030\uffcf\035" +
    "\uffcf\037\uffcf\001\002\000\022\002\uffd0\004\uffd0\007\uffd0" +
    "\010\uffd0\030\uffd0\031\104\035\uffd0\037\uffd0\001\002\000" +
    "\020\002\uffd1\004\uffd1\007\uffd1\010\uffd1\030\uffd1\035\uffd1" +
    "\037\uffd1\001\002\000\022\002\uffd9\004\uffd9\007\uffd9\010" +
    "\uffd9\030\uffd9\031\106\035\uffd9\037\uffd9\001\002\000\020" +
    "\002\uffda\004\uffda\007\uffda\010\uffda\030\uffda\035\uffda\037" +
    "\uffda\001\002\000\004\036\124\001\002\000\004\036\122" +
    "\001\002\000\004\036\120\001\002\000\004\036\116\001" +
    "\002\000\004\036\114\001\002\000\022\002\uffe4\004\uffe4" +
    "\007\uffe4\010\uffe4\030\uffe4\031\115\035\uffe4\037\uffe4\001" +
    "\002\000\020\002\uffe5\004\uffe5\007\uffe5\010\uffe5\030\uffe5" +
    "\035\uffe5\037\uffe5\001\002\000\022\002\uffde\004\uffde\007" +
    "\uffde\010\uffde\030\uffde\031\117\035\uffde\037\uffde\001\002" +
    "\000\020\002\uffdf\004\uffdf\007\uffdf\010\uffdf\030\uffdf\035" +
    "\uffdf\037\uffdf\001\002\000\022\002\uffe2\004\uffe2\007\uffe2" +
    "\010\uffe2\030\uffe2\031\121\035\uffe2\037\uffe2\001\002\000" +
    "\020\002\uffe3\004\uffe3\007\uffe3\010\uffe3\030\uffe3\035\uffe3" +
    "\037\uffe3\001\002\000\022\002\uffc5\004\uffc5\007\uffc5\010" +
    "\uffc5\030\uffc5\031\123\035\uffc5\037\uffc5\001\002\000\020" +
    "\002\uffc6\004\uffc6\007\uffc6\010\uffc6\030\uffc6\035\uffc6\037" +
    "\uffc6\001\002\000\022\002\uffd5\004\uffd5\007\uffd5\010\uffd5" +
    "\030\uffd5\031\125\035\uffd5\037\uffd5\001\002\000\020\002" +
    "\uffd6\004\uffd6\007\uffd6\010\uffd6\030\uffd6\035\uffd6\037\uffd6" +
    "\001\002\000\004\036\226\001\002\000\004\036\224\001" +
    "\002\000\004\037\214\001\002\000\004\036\212\001\002" +
    "\000\004\037\206\001\002\000\004\032\172\001\002\000" +
    "\004\036\170\001\002\000\004\037\145\001\002\000\004" +
    "\037\137\001\002\000\004\005\140\001\002\000\004\032" +
    "\141\001\002\000\004\033\142\001\002\000\004\036\143" +
    "\001\002\000\022\002\uffcd\004\uffcd\007\uffcd\010\uffcd\030" +
    "\uffcd\031\144\035\uffcd\037\uffcd\001\002\000\020\002\uffce" +
    "\004\uffce\007\uffce\010\uffce\030\uffce\035\uffce\037\uffce\001" +
    "\002\000\006\024\147\025\146\001\002\000\006\040\161" +
    "\041\160\001\002\000\004\037\150\001\002\000\006\034" +
    "\153\043\151\001\002\000\004\040\156\001\002\000\004" +
    "\040\155\001\002\000\004\034\154\001\002\000\004\040" +
    "\uffbe\001\002\000\020\002\uffbb\004\uffbb\007\uffbb\010\uffbb" +
    "\030\uffbb\035\uffbb\037\uffbb\001\002\000\022\002\uffbd\004" +
    "\uffbd\007\uffbd\010\uffbd\030\uffbd\031\157\035\uffbd\037\uffbd" +
    "\001\002\000\020\002\uffbc\004\uffbc\007\uffbc\010\uffbc\030" +
    "\uffbc\035\uffbc\037\uffbc\001\002\000\006\035\165\037\164" +
    "\001\002\000\022\002\uffdc\004\uffdc\007\uffdc\010\uffdc\030" +
    "\uffdc\031\162\035\uffdc\037\uffdc\001\002\000\020\002\uffdd" +
    "\004\uffdd\007\uffdd\010\uffdd\030\uffdd\035\uffdd\037\uffdd\001" +
    "\002\000\020\002\uffdb\004\uffdb\007\uffdb\010\uffdb\030\uffdb" +
    "\035\uffdb\037\uffdb\001\002\000\004\025\100\001\002\000" +
    "\004\005\166\001\002\000\004\037\167\001\002\000\004" +
    "\025\146\001\002\000\022\002\uffbf\004\uffbf\007\uffbf\010" +
    "\uffbf\030\uffbf\031\171\035\uffbf\037\uffbf\001\002\000\020" +
    "\002\uffc0\004\uffc0\007\uffc0\010\uffc0\030\uffc0\035\uffc0\037" +
    "\uffc0\001\002\000\004\005\200\001\002\000\004\037\174" +
    "\001\002\000\004\017\175\001\002\000\004\036\176\001" +
    "\002\000\004\031\177\001\002\000\020\002\uffc3\004\uffc3" +
    "\007\uffc3\010\uffc3\030\uffc3\035\uffc3\037\uffc3\001\002\000" +
    "\004\037\201\001\002\000\004\022\202\001\002\000\004" +
    "\037\203\001\002\000\004\043\204\001\002\000\004\033" +
    "\205\001\002\000\004\037\uffc4\001\002\000\004\043\207" +
    "\001\002\000\004\040\210\001\002\000\022\002\uffc1\004" +
    "\uffc1\007\uffc1\010\uffc1\030\uffc1\031\211\035\uffc1\037\uffc1" +
    "\001\002\000\020\002\uffc2\004\uffc2\007\uffc2\010\uffc2\030" +
    "\uffc2\035\uffc2\037\uffc2\001\002\000\022\002\uffd7\004\uffd7" +
    "\007\uffd7\010\uffd7\030\uffd7\031\213\035\uffd7\037\uffd7\001" +
    "\002\000\020\002\uffd8\004\uffd8\007\uffd8\010\uffd8\030\uffd8" +
    "\035\uffd8\037\uffd8\001\002\000\004\005\215\001\002\000" +
    "\006\040\217\041\216\001\002\000\006\035\222\037\223" +
    "\001\002\000\022\002\uffd3\004\uffd3\007\uffd3\010\uffd3\030" +
    "\uffd3\031\220\035\uffd3\037\uffd3\001\002\000\020\002\uffd4" +
    "\004\uffd4\007\uffd4\010\uffd4\030\uffd4\035\uffd4\037\uffd4\001" +
    "\002\000\020\002\uffd2\004\uffd2\007\uffd2\010\uffd2\030\uffd2" +
    "\035\uffd2\037\uffd2\001\002\000\004\026\130\001\002\000" +
    "\004\005\101\001\002\000\022\002\uffe0\004\uffe0\007\uffe0" +
    "\010\uffe0\030\uffe0\031\225\035\uffe0\037\uffe0\001\002\000" +
    "\020\002\uffe1\004\uffe1\007\uffe1\010\uffe1\030\uffe1\035\uffe1" +
    "\037\uffe1\001\002\000\022\002\uffc7\004\uffc7\007\uffc7\010" +
    "\uffc7\030\uffc7\031\227\035\uffc7\037\uffc7\001\002\000\020" +
    "\002\uffc8\004\uffc8\007\uffc8\010\uffc8\030\uffc8\035\uffc8\037" +
    "\uffc8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\044\002\003\003\013\004\020\005\023\006" +
    "\005\007\022\010\014\011\007\012\025\013\016\014\012" +
    "\015\021\016\004\022\015\024\026\025\030\026\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\002\076\003\013" +
    "\004\020\005\023\006\005\007\022\010\014\011\007\012" +
    "\025\013\016\014\012\015\021\016\004\022\015\024\026" +
    "\025\030\026\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\055\021\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\055\021\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



//El código que vaya acá se va a poner en EjemploSintactico.java
@Override
    public void syntax_error(Symbol cur_token) {
        Tokens t = (Tokens)cur_token.value;
        done_parsing(); //Finaliza la ejecución al encontrar un error
        report_error("Error sintáctico: [" + t.getRow() + ", " + t.getCol() + "]: " 
                +t.getLexema(), null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalisisSintactico$actions {
  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACION ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO PARCOMILLAS PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(id.getLexema() + " " + i.getLexema() + " " + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACION ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO NUMERO PCOMA FINLINEA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(id.getLexema() + " " + i.getLexema() + " " + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACION ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO NUMERO PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(id.getLexema() + " " + i.getLexema() + " " + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARCOMILLAS ::= COMILLAS COMILLAS 
            {
              Object RESULT =null;
		
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARCOMILLAS",21, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECSINO ::= TABS PALCLAVSINO DOSPUNTOS 
            {
              Object RESULT =null;
		int pcsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcs = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcs.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECSINO",19, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECSINO ::= TABS PALCLAVSINO DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcs = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcs.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECSINO",19, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RETORNAR ::= TABS PALCLAVRETORNAR ESPBLANCO NUMERO PCOMA 
            {
              Object RESULT =null;
		int pcrleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pcrright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pcr = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcr.getLexema()+ " " + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",18, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RETORNAR ::= TABS PALCLAVRETORNAR ESPBLANCO NUMERO PCOMA FINLINEA 
            {
              Object RESULT =null;
		int pcrleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pcrright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pcr = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcr.getLexema()+ " " + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",18, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECCONDICION ::= TABS PALCLAVSI CONDICION ESPBLANCO PALCLAVENTONCES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int pcsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens pcs = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int pceleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pceright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pce = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcs.getLexema() + " condición " + pce.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCONDICION",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICION ::= PARENABRE IDENTIFICADOR ESPBLANCO OPMATEMATICO ESPBLANCO NUMERO PARENCIERRA 
            {
              Object RESULT =null;
		
            System.out.println("Condición");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECCODIGO ::= TAB PALCLAVCODIGO DOSPUNTOS 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCODIGO",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECCODIGO ::= TAB PALCLAVCODIGO DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCODIGO",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECCODIGO ::= TABS PALCLAVCODIGO DOSPUNTOS 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCODIGO",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECCODIGO ::= TABS PALCLAVCODIGO DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCODIGO",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECFUNCION ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR PARENABRE PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + id.getLexema() + pa.getLexema() + 
            pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECFUNCION ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR PARENABRE PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + id.getLexema() + pa.getLexema() + 
            pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECFUNCION ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR PARENABRE PARAMETROS PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + id.getLexema() + pa.getLexema() + 
            pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECFUNCION ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR PARENABRE PARAMETROS PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + id.getLexema() + pa.getLexema() + 
            pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECFUNCION ::= TABS PALCLAVFUNCION ESPBLANCO IDENTIFICADOR PARENABRE PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcf.getLexema() + " " + id.getLexema() + pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECFUNCION ::= TABS PALCLAVFUNCION ESPBLANCO IDENTIFICADOR PARENABRE PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcf.getLexema() + " " + id.getLexema() + pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARARVARIABLES ::= ESPBLANCO IDENTIFICADOR COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(id.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARARVARIABLES ::= ESPBLANCO IDENTIFICADOR PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARARVARIABLES ::= ESPBLANCO IDENTIFICADOR PCOMA FINLINEA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARARVARIABLES ::= TABS TIPODEDATO ESPBLANCO IDENTIFICADOR COMA DECLARARVARIABLES 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(tdd.getLexema() + " " + id.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARARVARIABLES ::= TABS TIPODEDATO ESPBLANCO IDENTIFICADOR PCOMA 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(tdd.getLexema() + " " + id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARARVARIABLES ::= TABS TIPODEDATO ESPBLANCO IDENTIFICADOR PCOMA FINLINEA 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println("Una sola variable " + tdd.getLexema() + " " + id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARPALCLAVVARIABLES ::= TAB PALCLAVVARIABLES DOSPUNTOS 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARPALCLAVVARIABLES ::= TAB PALCLAVVARIABLES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARPALCLAVVARIABLES ::= TABS PALCLAVVARIABLES DOSPUNTOS 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARPALCLAVVARIABLES ::= TABS PALCLAVVARIABLES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ABRIREXCEL ::= ESPBLANCO ARCHIVOEXCEL PCOMA 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(ae.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ABRIREXCEL ::= ESPBLANCO ARCHIVOEXCEL PCOMA FINLINEA 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(ae.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ABRIREXCEL ::= TABS IDENTIFICADOR ESPBLANCO ARCHIVOEXCEL COMA ABRIREXCEL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(id.getLexema() + " " +c.getLexema() + " " + ae.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ABRIREXCEL ::= TABS IDENTIFICADOR ESPBLANCO ARCHIVOEXCEL PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(id.getLexema() + " " + ae.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ABRIREXCEL ::= TABS IDENTIFICADOR ESPBLANCO ARCHIVOEXCEL PCOMA FINLINEA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
        System.out.println(id.getLexema() + " " + ae.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARARCHIVOS ::= TAB PALCLAVARCHIVOS DOSPUNTOS 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARARCHIVOS ::= TAB PALCLAVARCHIVOS DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARARCHIVOS ::= TABS PALCLAVARCHIVOS DOSPUNTOS 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARARCHIVOS ::= TABS PALCLAVARCHIVOS DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARMETODOS ::= TAB PALCLAVMETODOS DOSPUNTOS 
            {
              Object RESULT =null;
		int pcmleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcmright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcm = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcm.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARMETODOS",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARMETODOS ::= TAB PALCLAVMETODOS DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcmleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcmright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcm = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcm.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARMETODOS",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARPROPIEDADES ::= TAB PALCLAVPROPIEDADES DOSPUNTOS 
            {
              Object RESULT =null;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcp.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPROPIEDADES",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARPROPIEDADES ::= TAB PALCLAVPROPIEDADES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcp.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPROPIEDADES",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IMPORTARARCHIVOS ::= PALCLAVINCLUIR ESPBLANCO COMILLAS ARCHIVOLED COMILLAS 
            {
              Object RESULT =null;
		int pcileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pciright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pci = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int aledleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aledright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens aled = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pci.getLexema() + " " + c.getLexema() + aled.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTARARCHIVOS",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IMPORTARARCHIVOS ::= PALCLAVINCLUIR ESPBLANCO COMILLAS ARCHIVOLED COMILLAS FINLINEA 
            {
              Object RESULT =null;
		int pcileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int pciright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens pci = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int aledleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aledright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens aled = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
        System.out.println(pci.getLexema() + " " + c.getLexema() + aled.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTARARCHIVOS",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECFUNCIONPRIN ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO PALCLAVPRINCIPAL PARENABRE PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + pcp.getLexema() +
                pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCIONPRIN",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECFUNCIONPRIN ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO PALCLAVPRINCIPAL PARENABRE PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + pcp.getLexema() +
                pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCIONPRIN",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECCLASE ::= PALCLAVCLASE ESPBLANCO IDENTIFICADOR DOSPUNTOS 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcc.getLexema() + " " +id.getLexema() +dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCLASE",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECCLASE ::= PALCLAVCLASE ESPBLANCO IDENTIFICADOR DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcc.getLexema() + " " +id.getLexema() +dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCLASE",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;
		
        System.out.println("Varios parámetros" );
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROS ::= PARAMETRO COMA PARAMETROS 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETRO ::= ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(tdd.getLexema() + " " + id.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETRO ::= TIPODEDATO ESPBLANCO IDENTIFICADOR 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(tdd.getLexema() + " " + id.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= ASIGNACION 
            {
              Object RESULT =null;
		
        System.out.println("Asignación");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= DECSINO 
            {
              Object RESULT =null;
		
        System.out.println("Sino");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= RETORNAR 
            {
              Object RESULT =null;
		
        System.out.println("Retorno");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= DECCONDICION 
            {
              Object RESULT =null;
		
        System.out.println("Declarando condición");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= DECCODIGO 
            {
              Object RESULT =null;
		
        System.out.println("Declarando inicio de código");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= DECFUNCION 
            {
              Object RESULT =null;
		
        System.out.println("Declarando funciones");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= DECLARARVARIABLES 
            {
              Object RESULT =null;
		
        System.out.println("Declarando variables");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= DECLARPALCLAVVARIABLES 
            {
              Object RESULT =null;
		
        System.out.println("Abriendo inicio de declaración de variables");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= ABRIREXCEL 
            {
              Object RESULT =null;
		
        System.out.println("Abriendo excel");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= DECLARARCHIVOS 
            {
              Object RESULT =null;
		
        System.out.println("Declarando archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= DECLARMETODOS 
            {
              Object RESULT =null;
		
        System.out.println("Declarando métodos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= DECLARPROPIEDADES 
            {
              Object RESULT =null;
		
        System.out.println("Declarando propiedades");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= IMPORTARARCHIVOS 
            {
              Object RESULT =null;
		
        System.out.println("Incluyendo archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= DECFUNCIONPRIN 
            {
              Object RESULT =null;
		
        System.out.println("Declaración de función principal");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresion ::= DECCLASE 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println("Declaración de clase");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expresiones ::= expresion expresiones 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expresiones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

