
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 22 01:05:10 CST 2018
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 22 01:05:10 CST 2018
  */
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\020\005\000" +
    "\002\020\006\000\002\021\005\000\002\021\003\000\002" +
    "\004\007\000\002\004\006\000\002\005\013\000\002\005" +
    "\012\000\002\006\010\000\002\006\007\000\002\007\006" +
    "\000\002\007\005\000\002\010\006\000\002\010\005\000" +
    "\002\011\006\000\002\011\005\000\002\011\006\000\002" +
    "\011\005\000\002\012\010\000\002\012\007\000\002\012" +
    "\010\000\002\012\006\000\002\012\005\000\002\013\006" +
    "\000\002\013\005\000\002\013\006\000\002\013\005\000" +
    "\002\014\010\000\002\014\007\000\002\014\010\000\002" +
    "\014\006\000\002\014\005\000\002\014\005\000\002\015" +
    "\012\000\002\015\011\000\002\015\014\000\002\015\013" +
    "\000\002\015\013\000\002\015\012\000\002\016\006\000" +
    "\002\016\005\000\002\016\006\000\002\016\005\000\002" +
    "\023\011\000\002\022\011\000\002\024\010\000\002\024" +
    "\007\000\002\025\006\000\002\025\005\000\002\026\011" +
    "\000\002\026\012\000\002\026\012\000\002\026\011\000" +
    "\002\027\010\000\002\027\007\000\002\027\010\000\002" +
    "\027\007\000\002\030\010\000\002\030\007\000\002\031" +
    "\005\000\002\031\004\000\002\031\003\000\002\032\015" +
    "\000\002\032\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\016\004\032\007\021\010\035\032\011\037" +
    "\007\041\012\001\002\000\004\002\262\001\002\000\020" +
    "\002\ufffc\004\ufffc\007\ufffc\010\ufffc\032\ufffc\037\ufffc\041" +
    "\ufffc\001\002\000\020\002\ufff4\004\ufff4\007\ufff4\010\ufff4" +
    "\032\ufff4\037\ufff4\041\ufff4\001\002\000\030\005\147\007" +
    "\150\013\137\014\141\015\136\016\144\020\142\021\145" +
    "\022\143\023\146\030\140\001\002\000\020\002\ufff9\004" +
    "\ufff9\007\ufff9\010\ufff9\032\ufff9\037\ufff9\041\ufff9\001\002" +
    "\000\016\011\117\012\115\013\116\014\112\015\113\022" +
    "\114\001\002\000\006\005\104\027\103\001\002\000\020" +
    "\002\ufff6\004\ufff6\007\ufff6\010\ufff6\032\ufff6\037\ufff6\041" +
    "\ufff6\001\002\000\020\002\uffff\004\032\007\021\010\035" +
    "\032\011\037\007\041\012\001\002\000\020\002\ufffa\004" +
    "\ufffa\007\ufffa\010\ufffa\032\ufffa\037\ufffa\041\ufffa\001\002" +
    "\000\020\002\ufff3\004\ufff3\007\ufff3\010\ufff3\032\ufff3\037" +
    "\ufff3\041\ufff3\001\002\000\020\002\ufff7\004\ufff7\007\ufff7" +
    "\010\ufff7\032\ufff7\037\ufff7\041\ufff7\001\002\000\020\002" +
    "\uffee\004\uffee\007\uffee\010\uffee\032\uffee\037\uffee\041\uffee" +
    "\001\002\000\004\041\047\001\002\000\020\002\ufffe\004" +
    "\ufffe\007\ufffe\010\ufffe\032\ufffe\037\ufffe\041\ufffe\001\002" +
    "\000\020\002\ufffb\004\ufffb\007\ufffb\010\ufffb\032\ufffb\037" +
    "\ufffb\041\ufffb\001\002\000\020\002\ufff5\004\ufff5\007\ufff5" +
    "\010\ufff5\032\ufff5\037\ufff5\041\ufff5\001\002\000\020\002" +
    "\ufff0\004\ufff0\007\ufff0\010\ufff0\032\ufff0\037\ufff0\041\ufff0" +
    "\001\002\000\020\002\ufffd\004\ufffd\007\ufffd\010\ufffd\032" +
    "\ufffd\037\ufffd\041\ufffd\001\002\000\020\002\uffed\004\uffed" +
    "\007\uffed\010\uffed\032\uffed\037\uffed\041\uffed\001\002\000" +
    "\020\002\ufff8\004\ufff8\007\ufff8\010\ufff8\032\ufff8\037\ufff8" +
    "\041\ufff8\001\002\000\020\002\ufff2\004\ufff2\007\ufff2\010" +
    "\ufff2\032\ufff2\037\ufff2\041\ufff2\001\002\000\004\041\043" +
    "\001\002\000\020\002\ufff1\004\ufff1\007\ufff1\010\ufff1\032" +
    "\ufff1\037\ufff1\041\ufff1\001\002\000\020\002\uffef\004\uffef" +
    "\007\uffef\010\uffef\032\uffef\037\uffef\041\uffef\001\002\000" +
    "\004\041\036\001\002\000\004\036\037\001\002\000\004" +
    "\031\040\001\002\000\004\036\041\001\002\000\022\002" +
    "\uffe3\004\uffe3\007\uffe3\010\uffe3\032\uffe3\033\042\037\uffe3" +
    "\041\uffe3\001\002\000\020\002\uffe4\004\uffe4\007\uffe4\010" +
    "\uffe4\032\uffe4\037\uffe4\041\uffe4\001\002\000\004\005\044" +
    "\001\002\000\004\040\045\001\002\000\022\002\uffe7\004" +
    "\uffe7\007\uffe7\010\uffe7\032\uffe7\033\046\037\uffe7\041\uffe7" +
    "\001\002\000\020\002\uffe8\004\uffe8\007\uffe8\010\uffe8\032" +
    "\uffe8\037\uffe8\041\uffe8\001\002\000\004\030\050\001\002" +
    "\000\004\041\051\001\002\000\006\005\052\006\053\001" +
    "\002\000\004\034\060\001\002\000\004\034\054\001\002" +
    "\000\004\035\055\001\002\000\004\040\056\001\002\000" +
    "\022\002\uffe5\004\uffe5\007\uffe5\010\uffe5\032\uffe5\033\057" +
    "\037\uffe5\041\uffe5\001\002\000\020\002\uffe6\004\uffe6\007" +
    "\uffe6\010\uffe6\032\uffe6\037\uffe6\041\uffe6\001\002\000\010" +
    "\030\063\035\064\041\065\001\002\000\006\035\uffe9\043" +
    "\100\001\002\000\004\035\075\001\002\000\004\041\073" +
    "\001\002\000\004\040\071\001\002\000\004\030\066\001" +
    "\002\000\004\041\067\001\002\000\004\005\070\001\002" +
    "\000\006\035\uffeb\043\uffeb\001\002\000\022\002\uffc6\004" +
    "\uffc6\007\uffc6\010\uffc6\032\uffc6\033\072\037\uffc6\041\uffc6" +
    "\001\002\000\020\002\uffc7\004\uffc7\007\uffc7\010\uffc7\032" +
    "\uffc7\037\uffc7\041\uffc7\001\002\000\004\005\074\001\002" +
    "\000\006\035\uffec\043\uffec\001\002\000\004\040\076\001" +
    "\002\000\022\002\uffc8\004\uffc8\007\uffc8\010\uffc8\032\uffc8" +
    "\033\077\037\uffc8\041\uffc8\001\002\000\020\002\uffc9\004" +
    "\uffc9\007\uffc9\010\uffc9\032\uffc9\037\uffc9\041\uffc9\001\002" +
    "\000\006\030\063\041\065\001\002\000\004\035\uffea\001" +
    "\002\000\004\002\000\001\002\000\004\042\110\001\002" +
    "\000\006\042\106\043\105\001\002\000\020\002\uffcc\004" +
    "\uffcc\007\uffcc\010\uffcc\032\uffcc\037\uffcc\041\uffcc\001\002" +
    "\000\022\002\uffcd\004\uffcd\007\uffcd\010\uffcd\032\uffcd\033" +
    "\107\037\uffcd\041\uffcd\001\002\000\020\002\uffce\004\uffce" +
    "\007\uffce\010\uffce\032\uffce\037\uffce\041\uffce\001\002\000" +
    "\022\002\uffd6\004\uffd6\007\uffd6\010\uffd6\032\uffd6\033\111" +
    "\037\uffd6\041\uffd6\001\002\000\020\002\uffd7\004\uffd7\007" +
    "\uffd7\010\uffd7\032\uffd7\037\uffd7\041\uffd7\001\002\000\004" +
    "\040\134\001\002\000\004\040\132\001\002\000\004\041" +
    "\126\001\002\000\004\040\124\001\002\000\004\040\122" +
    "\001\002\000\004\040\120\001\002\000\022\002\uffe1\004" +
    "\uffe1\007\uffe1\010\uffe1\032\uffe1\033\121\037\uffe1\041\uffe1" +
    "\001\002\000\020\002\uffe2\004\uffe2\007\uffe2\010\uffe2\032" +
    "\uffe2\037\uffe2\041\uffe2\001\002\000\022\002\uffdb\004\uffdb" +
    "\007\uffdb\010\uffdb\032\uffdb\033\123\037\uffdb\041\uffdb\001" +
    "\002\000\020\002\uffdc\004\uffdc\007\uffdc\010\uffdc\032\uffdc" +
    "\037\uffdc\041\uffdc\001\002\000\022\002\uffdf\004\uffdf\007" +
    "\uffdf\010\uffdf\032\uffdf\033\125\037\uffdf\041\uffdf\001\002" +
    "\000\020\002\uffe0\004\uffe0\007\uffe0\010\uffe0\032\uffe0\037" +
    "\uffe0\041\uffe0\001\002\000\004\046\127\001\002\000\004" +
    "\042\130\001\002\000\022\002\uffb4\004\uffb4\007\uffb4\010" +
    "\uffb4\032\uffb4\033\131\037\uffb4\041\uffb4\001\002\000\020" +
    "\002\uffb5\004\uffb5\007\uffb5\010\uffb5\032\uffb5\037\uffb5\041" +
    "\uffb5\001\002\000\022\002\uffc2\004\uffc2\007\uffc2\010\uffc2" +
    "\032\uffc2\033\133\037\uffc2\041\uffc2\001\002\000\020\002" +
    "\uffc3\004\uffc3\007\uffc3\010\uffc3\032\uffc3\037\uffc3\041\uffc3" +
    "\001\002\000\022\002\uffd2\004\uffd2\007\uffd2\010\uffd2\032" +
    "\uffd2\033\135\037\uffd2\041\uffd2\001\002\000\020\002\uffd3" +
    "\004\uffd3\007\uffd3\010\uffd3\032\uffd3\037\uffd3\041\uffd3\001" +
    "\002\000\004\040\260\001\002\000\004\040\256\001\002" +
    "\000\004\041\246\001\002\000\004\040\244\001\002\000" +
    "\004\041\240\001\002\000\004\041\234\001\002\000\004" +
    "\034\220\001\002\000\004\040\216\001\002\000\004\041" +
    "\212\001\002\000\004\041\157\001\002\000\004\041\151" +
    "\001\002\000\004\005\152\001\002\000\004\034\153\001" +
    "\002\000\004\035\154\001\002\000\004\040\155\001\002" +
    "\000\022\002\uffca\004\uffca\007\uffca\010\uffca\032\uffca\033" +
    "\156\037\uffca\041\uffca\001\002\000\020\002\uffcb\004\uffcb" +
    "\007\uffcb\010\uffcb\032\uffcb\037\uffcb\041\uffcb\001\002\000" +
    "\006\026\161\027\160\001\002\000\006\042\203\043\202" +
    "\001\002\000\004\041\162\001\002\000\010\005\164\045" +
    "\163\046\165\001\002\000\004\042\200\001\002\000\004" +
    "\047\170\001\002\000\004\042\166\001\002\000\022\002" +
    "\uffb8\004\uffb8\007\uffb8\010\uffb8\032\uffb8\033\167\037\uffb8" +
    "\041\uffb8\001\002\000\020\002\uffb9\004\uffb9\007\uffb9\010" +
    "\uffb9\032\uffb9\037\uffb9\041\uffb9\001\002\000\004\045\171" +
    "\001\002\000\006\043\176\050\uffaf\001\002\000\004\050" +
    "\173\001\002\000\004\042\174\001\002\000\022\002\uffad" +
    "\004\uffad\007\uffad\010\uffad\032\uffad\033\175\037\uffad\041" +
    "\uffad\001\002\000\020\002\uffae\004\uffae\007\uffae\010\uffae" +
    "\032\uffae\037\uffae\041\uffae\001\002\000\006\045\171\050" +
    "\uffb0\001\002\000\004\050\uffb1\001\002\000\022\002\uffbb" +
    "\004\uffbb\007\uffbb\010\uffbb\032\uffbb\033\201\037\uffbb\041" +
    "\uffbb\001\002\000\020\002\uffba\004\uffba\007\uffba\010\uffba" +
    "\032\uffba\037\uffba\041\uffba\001\002\000\006\037\207\041" +
    "\206\001\002\000\022\002\uffd9\004\uffd9\007\uffd9\010\uffd9" +
    "\032\uffd9\033\204\037\uffd9\041\uffd9\001\002\000\020\002" +
    "\uffda\004\uffda\007\uffda\010\uffda\032\uffda\037\uffda\041\uffda" +
    "\001\002\000\020\002\uffd8\004\uffd8\007\uffd8\010\uffd8\032" +
    "\uffd8\037\uffd8\041\uffd8\001\002\000\004\027\103\001\002" +
    "\000\004\005\210\001\002\000\004\041\211\001\002\000" +
    "\004\027\160\001\002\000\004\005\213\001\002\000\004" +
    "\042\214\001\002\000\022\002\uffb2\004\uffb2\007\uffb2\010" +
    "\uffb2\032\uffb2\033\215\037\uffb2\041\uffb2\001\002\000\020" +
    "\002\uffb3\004\uffb3\007\uffb3\010\uffb3\032\uffb3\037\uffb3\041" +
    "\uffb3\001\002\000\022\002\uffbc\004\uffbc\007\uffbc\010\uffbc" +
    "\032\uffbc\033\217\037\uffbc\041\uffbc\001\002\000\020\002" +
    "\uffbd\004\uffbd\007\uffbd\010\uffbd\032\uffbd\037\uffbd\041\uffbd" +
    "\001\002\000\004\005\226\001\002\000\004\041\222\001" +
    "\002\000\004\017\223\001\002\000\004\040\224\001\002" +
    "\000\004\033\225\001\002\000\020\002\uffc0\004\uffc0\007" +
    "\uffc0\010\uffc0\032\uffc0\037\uffc0\041\uffc0\001\002\000\004" +
    "\041\227\001\002\000\004\024\230\001\002\000\004\041" +
    "\231\001\002\000\004\045\232\001\002\000\004\035\233" +
    "\001\002\000\004\041\uffc1\001\002\000\004\046\235\001" +
    "\002\000\004\042\236\001\002\000\022\002\uffb6\004\uffb6" +
    "\007\uffb6\010\uffb6\032\uffb6\033\237\037\uffb6\041\uffb6\001" +
    "\002\000\020\002\uffb7\004\uffb7\007\uffb7\010\uffb7\032\uffb7" +
    "\037\uffb7\041\uffb7\001\002\000\004\045\241\001\002\000" +
    "\004\042\242\001\002\000\022\002\uffbe\004\uffbe\007\uffbe" +
    "\010\uffbe\032\uffbe\033\243\037\uffbe\041\uffbe\001\002\000" +
    "\020\002\uffbf\004\uffbf\007\uffbf\010\uffbf\032\uffbf\037\uffbf" +
    "\041\uffbf\001\002\000\022\002\uffd4\004\uffd4\007\uffd4\010" +
    "\uffd4\032\uffd4\033\245\037\uffd4\041\uffd4\001\002\000\020" +
    "\002\uffd5\004\uffd5\007\uffd5\010\uffd5\032\uffd5\037\uffd5\041" +
    "\uffd5\001\002\000\004\005\247\001\002\000\006\042\251" +
    "\043\250\001\002\000\006\037\254\041\255\001\002\000" +
    "\022\002\uffd0\004\uffd0\007\uffd0\010\uffd0\032\uffd0\033\252" +
    "\037\uffd0\041\uffd0\001\002\000\020\002\uffd1\004\uffd1\007" +
    "\uffd1\010\uffd1\032\uffd1\037\uffd1\041\uffd1\001\002\000\020" +
    "\002\uffcf\004\uffcf\007\uffcf\010\uffcf\032\uffcf\037\uffcf\041" +
    "\uffcf\001\002\000\004\030\140\001\002\000\004\005\104" +
    "\001\002\000\022\002\uffdd\004\uffdd\007\uffdd\010\uffdd\032" +
    "\uffdd\033\257\037\uffdd\041\uffdd\001\002\000\020\002\uffde" +
    "\004\uffde\007\uffde\010\uffde\032\uffde\037\uffde\041\uffde\001" +
    "\002\000\022\002\uffc4\004\uffc4\007\uffc4\010\uffc4\032\uffc4" +
    "\033\261\037\uffc4\041\uffc4\001\002\000\020\002\uffc5\004" +
    "\uffc5\007\uffc5\010\uffc5\032\uffc5\037\uffc5\041\uffc5\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\052\002\003\003\013\004\021\005\025\006" +
    "\004\007\022\010\014\011\007\012\027\013\016\014\012" +
    "\015\023\016\005\022\015\024\030\025\032\026\024\027" +
    "\033\030\017\032\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\002\101\003\013\004\021\005\025\006\004\007" +
    "\022\010\014\011\007\012\027\013\016\014\012\015\023" +
    "\016\005\022\015\024\030\025\032\026\024\027\033\030" +
    "\017\032\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\060\021\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\060\021\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



//El código que vaya acá se va a poner en EjemploSintactico.java
@Override
    public void syntax_error(Symbol cur_token) {
        Tokens t = (Tokens)cur_token.value;
        done_parsing(); //Finaliza la ejecución al encontrar un error
        report_error("Error sintáctico: [" + t.getRow() + ", " + t.getCol() + "]: " 
                +t.getLexema(), null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalisisSintactico$actions {
  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERACIONARCHIVOS ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO IDENTIFICADOR CORCHABRE VARIABLEARCHIVO CORCHCIERRA PCOMA 
            {
              Object RESULT =null;
		
       System.out.println("Operando archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONARCHIVOS",24, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERACIONARCHIVOS ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO IDENTIFICADOR CORCHABRE VARIABLEARCHIVO CORCHCIERRA PCOMA FINLINEA 
            {
              Object RESULT =null;
		
       System.out.println("Operando archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONARCHIVOS",24, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARIABLEARCHIVO ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println("número: " + n.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLEARCHIVO",23, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARIABLEARCHIVO ::= NUMERO COMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println("número, coma" + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLEARCHIVO",23, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARIABLEARCHIVO ::= NUMERO COMA VARIABLEARCHIVO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println("más de un dato" + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLEARCHIVO",23, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ABRIENDOEXCEL ::= TABS PALCLAVABRIR ESPBLANCO IDENTIFICADOR PCOMA 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pca.getLexema() + " " + id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIENDOEXCEL",22, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ABRIENDOEXCEL ::= TABS PALCLAVABRIR ESPBLANCO IDENTIFICADOR PCOMA FINLINEA 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pca.getLexema() + " " + id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIENDOEXCEL",22, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ESCRIBIRTEXTO ::= TAB PALCLAVESCRIBIR ESPBLANCO MENSAJE PCOMA 
            {
              Object RESULT =null;
		int pceleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pceright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pce = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens m = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pce.getLexema() + " " + m.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ESCRIBIRTEXTO",21, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ESCRIBIRTEXTO ::= TAB PALCLAVESCRIBIR ESPBLANCO MENSAJE PCOMA FINLINEA 
            {
              Object RESULT =null;
		int pceleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pceright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pce = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens m = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pce.getLexema() + " " + m.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ESCRIBIRTEXTO",21, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ESCRIBIRTEXTO ::= TABS PALCLAVESCRIBIR ESPBLANCO MENSAJE PCOMA 
            {
              Object RESULT =null;
		int pceleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pceright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pce = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens m = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pce.getLexema() + " " + m.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ESCRIBIRTEXTO",21, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ESCRIBIRTEXTO ::= TABS PALCLAVESCRIBIR ESPBLANCO MENSAJE PCOMA FINLINEA 
            {
              Object RESULT =null;
		int pceleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pceright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pce = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens m = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pce.getLexema() + " " + m.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ESCRIBIRTEXTO",21, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO MENSAJE PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens m = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(id.getLexema() + " " + i.getLexema() + " " + m.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACION ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO MENSAJE PCOMA FINLINEA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(id.getLexema() + " " + i.getLexema() + c.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACION ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO NUMERO PCOMA FINLINEA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(id.getLexema() + " " + i.getLexema() + " " + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACION ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO NUMERO PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(id.getLexema() + " " + i.getLexema() + " " + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECSINO ::= TABS PALCLAVSINO DOSPUNTOS 
            {
              Object RESULT =null;
		int pcsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcs = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcs.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECSINO",19, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECSINO ::= TABS PALCLAVSINO DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcs = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcs.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECSINO",19, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RETORNAR ::= TABS PALCLAVRETORNAR ESPBLANCO NUMERO PCOMA 
            {
              Object RESULT =null;
		int pcrleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pcrright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pcr = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcr.getLexema()+ " " + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",18, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RETORNAR ::= TABS PALCLAVRETORNAR ESPBLANCO NUMERO PCOMA FINLINEA 
            {
              Object RESULT =null;
		int pcrleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pcrright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pcr = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcr.getLexema()+ " " + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",18, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECCONDICION ::= TABS PALCLAVSI CONDICION ESPBLANCO PALCLAVENTONCES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int pcsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens pcs = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int pceleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pceright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pce = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcs.getLexema() + " condición " + pce.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCONDICION",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICION ::= PARENABRE IDENTIFICADOR ESPBLANCO OPMATEMATICO ESPBLANCO NUMERO PARENCIERRA 
            {
              Object RESULT =null;
		
            System.out.println("Condición");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECCODIGO ::= TAB PALCLAVCODIGO DOSPUNTOS 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCODIGO",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECCODIGO ::= TAB PALCLAVCODIGO DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCODIGO",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECCODIGO ::= TABS PALCLAVCODIGO DOSPUNTOS 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCODIGO",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECCODIGO ::= TABS PALCLAVCODIGO DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCODIGO",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECFUNCION ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR PARENABRE PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + id.getLexema() + pa.getLexema() + 
            pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECFUNCION ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR PARENABRE PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + id.getLexema() + pa.getLexema() + 
            pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECFUNCION ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR PARENABRE PARAMETROS PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + id.getLexema() + pa.getLexema() + 
            pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECFUNCION ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR PARENABRE PARAMETROS PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + id.getLexema() + pa.getLexema() + 
            pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECFUNCION ::= TABS PALCLAVFUNCION ESPBLANCO IDENTIFICADOR PARENABRE PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcf.getLexema() + " " + id.getLexema() + pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECFUNCION ::= TABS PALCLAVFUNCION ESPBLANCO IDENTIFICADOR PARENABRE PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcf.getLexema() + " " + id.getLexema() + pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARARVARIABLES ::= ESPBLANCO IDENTIFICADOR COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(id.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARARVARIABLES ::= ESPBLANCO IDENTIFICADOR PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARARVARIABLES ::= ESPBLANCO IDENTIFICADOR PCOMA FINLINEA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARARVARIABLES ::= TABS TIPODEDATO ESPBLANCO IDENTIFICADOR COMA DECLARARVARIABLES 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(tdd.getLexema() + " " + id.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARARVARIABLES ::= TABS TIPODEDATO ESPBLANCO IDENTIFICADOR PCOMA 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(tdd.getLexema() + " " + id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARARVARIABLES ::= TABS TIPODEDATO ESPBLANCO IDENTIFICADOR PCOMA FINLINEA 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println("Una sola variable " + tdd.getLexema() + " " + id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARPALCLAVVARIABLES ::= TAB PALCLAVVARIABLES DOSPUNTOS 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARPALCLAVVARIABLES ::= TAB PALCLAVVARIABLES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARPALCLAVVARIABLES ::= TABS PALCLAVVARIABLES DOSPUNTOS 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARPALCLAVVARIABLES ::= TABS PALCLAVVARIABLES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ABRIREXCEL ::= ESPBLANCO ARCHIVOEXCEL PCOMA 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(ae.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ABRIREXCEL ::= ESPBLANCO ARCHIVOEXCEL PCOMA FINLINEA 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(ae.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ABRIREXCEL ::= TABS IDENTIFICADOR ESPBLANCO ARCHIVOEXCEL COMA ABRIREXCEL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(id.getLexema() + " " +c.getLexema() + " " + ae.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ABRIREXCEL ::= TABS IDENTIFICADOR ESPBLANCO ARCHIVOEXCEL PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(id.getLexema() + " " + ae.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ABRIREXCEL ::= TABS IDENTIFICADOR ESPBLANCO ARCHIVOEXCEL PCOMA FINLINEA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
        System.out.println(id.getLexema() + " " + ae.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARARCHIVOS ::= TAB PALCLAVARCHIVOS DOSPUNTOS 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARARCHIVOS ::= TAB PALCLAVARCHIVOS DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARARCHIVOS ::= TABS PALCLAVARCHIVOS DOSPUNTOS 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARARCHIVOS ::= TABS PALCLAVARCHIVOS DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARMETODOS ::= TAB PALCLAVMETODOS DOSPUNTOS 
            {
              Object RESULT =null;
		int pcmleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcmright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcm = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcm.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARMETODOS",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARMETODOS ::= TAB PALCLAVMETODOS DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcmleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcmright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcm = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcm.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARMETODOS",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARPROPIEDADES ::= TAB PALCLAVPROPIEDADES DOSPUNTOS 
            {
              Object RESULT =null;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcp.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPROPIEDADES",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARPROPIEDADES ::= TAB PALCLAVPROPIEDADES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcp.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPROPIEDADES",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMPORTARARCHIVOS ::= PALCLAVINCLUIR ESPBLANCO COMILLAS ARCHIVOLED COMILLAS 
            {
              Object RESULT =null;
		int pcileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pciright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pci = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int aledleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aledright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens aled = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pci.getLexema() + " " + c.getLexema() + aled.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTARARCHIVOS",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IMPORTARARCHIVOS ::= PALCLAVINCLUIR ESPBLANCO COMILLAS ARCHIVOLED COMILLAS FINLINEA 
            {
              Object RESULT =null;
		int pcileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int pciright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens pci = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int aledleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aledright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens aled = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
        System.out.println(pci.getLexema() + " " + c.getLexema() + aled.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTARARCHIVOS",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECFUNCIONPRIN ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO PALCLAVPRINCIPAL PARENABRE PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + pcp.getLexema() +
                pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCIONPRIN",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECFUNCIONPRIN ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO PALCLAVPRINCIPAL PARENABRE PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + pcp.getLexema() +
                pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCIONPRIN",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECCLASE ::= PALCLAVCLASE ESPBLANCO IDENTIFICADOR DOSPUNTOS 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(pcc.getLexema() + " " +id.getLexema() +dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCLASE",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECCLASE ::= PALCLAVCLASE ESPBLANCO IDENTIFICADOR DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        System.out.println(pcc.getLexema() + " " +id.getLexema() +dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCLASE",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;
		
        System.out.println("Varios parámetros" );
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS ::= PARAMETRO COMA PARAMETROS 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETRO ::= ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(tdd.getLexema() + " " + id.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETRO ::= TIPODEDATO ESPBLANCO IDENTIFICADOR 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println(tdd.getLexema() + " " + id.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= OPERACIONARCHIVOS 
            {
              Object RESULT =null;
		
        System.out.println("Trabajando con archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= ABRIENDOEXCEL 
            {
              Object RESULT =null;
		
        System.out.println("Abrir excel");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= ESCRIBIRTEXTO 
            {
              Object RESULT =null;
		
        System.out.println("Escribiendo mensaje");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= ASIGNACION 
            {
              Object RESULT =null;
		
        System.out.println("Asignación");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= DECSINO 
            {
              Object RESULT =null;
		
        System.out.println("Sino");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= RETORNAR 
            {
              Object RESULT =null;
		
        System.out.println("Retorno");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= DECCONDICION 
            {
              Object RESULT =null;
		
        System.out.println("Declarando condición");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= DECCODIGO 
            {
              Object RESULT =null;
		
        System.out.println("Declarando inicio de código");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= DECFUNCION 
            {
              Object RESULT =null;
		
        System.out.println("Declarando funciones");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= DECLARARVARIABLES 
            {
              Object RESULT =null;
		
        System.out.println("Declarando variables");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= DECLARPALCLAVVARIABLES 
            {
              Object RESULT =null;
		
        System.out.println("Abriendo inicio de declaración de variables");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= ABRIREXCEL 
            {
              Object RESULT =null;
		
        System.out.println("Abriendo excel");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= DECLARARCHIVOS 
            {
              Object RESULT =null;
		
        System.out.println("Declarando archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= DECLARMETODOS 
            {
              Object RESULT =null;
		
        System.out.println("Declarando métodos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= DECLARPROPIEDADES 
            {
              Object RESULT =null;
		
        System.out.println("Declarando propiedades");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= IMPORTARARCHIVOS 
            {
              Object RESULT =null;
		
        System.out.println("Incluyendo archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= DECFUNCIONPRIN 
            {
              Object RESULT =null;
		
        System.out.println("Declaración de función principal");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresion ::= DECCLASE 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println("Declaración de clase");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expresiones ::= expresion expresiones 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expresiones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

