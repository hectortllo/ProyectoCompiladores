
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 22 04:23:56 CST 2018
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 22 04:23:56 CST 2018
  */
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\020\005\000\002\020\006\000\002\021\005\000\002\021" +
    "\003\000\002\004\007\000\002\004\006\000\002\005\013" +
    "\000\002\005\012\000\002\006\010\000\002\006\007\000" +
    "\002\007\006\000\002\007\005\000\002\010\006\000\002" +
    "\010\005\000\002\011\006\000\002\011\005\000\002\011" +
    "\006\000\002\011\005\000\002\012\010\000\002\012\007" +
    "\000\002\012\010\000\002\012\006\000\002\012\005\000" +
    "\002\013\006\000\002\013\005\000\002\013\006\000\002" +
    "\013\005\000\002\014\010\000\002\014\007\000\002\014" +
    "\010\000\002\014\006\000\002\014\005\000\002\014\005" +
    "\000\002\015\012\000\002\015\011\000\002\015\014\000" +
    "\002\015\013\000\002\015\013\000\002\015\012\000\002" +
    "\016\006\000\002\016\005\000\002\016\006\000\002\016" +
    "\005\000\002\023\011\000\002\022\011\000\002\024\010" +
    "\000\002\024\007\000\002\025\006\000\002\025\005\000" +
    "\002\026\011\000\002\026\012\000\002\026\012\000\002" +
    "\026\011\000\002\027\010\000\002\027\007\000\002\027" +
    "\010\000\002\027\007\000\002\034\013\000\002\034\012" +
    "\000\002\030\010\000\002\030\007\000\002\031\005\000" +
    "\002\031\004\000\002\031\003\000\002\032\015\000\002" +
    "\032\014\000\002\033\027\000\002\033\026\000\002\035" +
    "\017\000\002\035\016\000\002\017\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\016\004\035\007\022\010\040\041\011\046" +
    "\007\050\013\001\002\000\004\002\346\001\002\000\020" +
    "\002\ufffc\004\ufffc\007\ufffc\010\ufffc\041\ufffc\046\ufffc\050" +
    "\ufffc\001\002\000\020\002\ufff4\004\ufff4\007\ufff4\010\ufff4" +
    "\041\ufff4\046\ufff4\050\ufff4\001\002\000\036\005\156\007" +
    "\157\013\143\014\145\015\142\016\151\020\146\021\152" +
    "\022\150\023\153\024\147\030\155\034\154\037\144\001" +
    "\002\000\020\002\ufff9\004\ufff9\007\ufff9\010\ufff9\041\ufff9" +
    "\046\ufff9\050\ufff9\001\002\000\016\011\123\012\121\013" +
    "\122\014\117\015\116\022\120\001\002\000\020\002\ufff6" +
    "\004\ufff6\007\ufff6\010\ufff6\041\ufff6\046\ufff6\050\ufff6\001" +
    "\002\000\006\005\110\036\107\001\002\000\020\002\uffff" +
    "\004\035\007\022\010\040\041\011\046\007\050\013\001" +
    "\002\000\020\002\ufffa\004\ufffa\007\ufffa\010\ufffa\041\ufffa" +
    "\046\ufffa\050\ufffa\001\002\000\020\002\ufff3\004\ufff3\007" +
    "\ufff3\010\ufff3\041\ufff3\046\ufff3\050\ufff3\001\002\000\020" +
    "\002\ufff7\004\ufff7\007\ufff7\010\ufff7\041\ufff7\046\ufff7\050" +
    "\ufff7\001\002\000\020\002\uffee\004\uffee\007\uffee\010\uffee" +
    "\041\uffee\046\uffee\050\uffee\001\002\000\020\002\uffea\004" +
    "\uffea\007\uffea\010\uffea\041\uffea\046\uffea\050\uffea\001\002" +
    "\000\004\050\053\001\002\000\020\002\ufffe\004\ufffe\007" +
    "\ufffe\010\ufffe\041\ufffe\046\ufffe\050\ufffe\001\002\000\020" +
    "\002\uffec\004\uffec\007\uffec\010\uffec\041\uffec\046\uffec\050" +
    "\uffec\001\002\000\020\002\ufffb\004\ufffb\007\ufffb\010\ufffb" +
    "\041\ufffb\046\ufffb\050\ufffb\001\002\000\020\002\ufff5\004" +
    "\ufff5\007\ufff5\010\ufff5\041\ufff5\046\ufff5\050\ufff5\001\002" +
    "\000\020\002\ufff0\004\ufff0\007\ufff0\010\ufff0\041\ufff0\046" +
    "\ufff0\050\ufff0\001\002\000\020\002\ufffd\004\ufffd\007\ufffd" +
    "\010\ufffd\041\ufffd\046\ufffd\050\ufffd\001\002\000\020\002" +
    "\uffe9\004\uffe9\007\uffe9\010\uffe9\041\uffe9\046\uffe9\050\uffe9" +
    "\001\002\000\020\002\uffed\004\uffed\007\uffed\010\uffed\041" +
    "\uffed\046\uffed\050\uffed\001\002\000\020\002\ufff8\004\ufff8" +
    "\007\ufff8\010\ufff8\041\ufff8\046\ufff8\050\ufff8\001\002\000" +
    "\020\002\ufff2\004\ufff2\007\ufff2\010\ufff2\041\ufff2\046\ufff2" +
    "\050\ufff2\001\002\000\004\050\047\001\002\000\020\002" +
    "\ufff1\004\ufff1\007\ufff1\010\ufff1\041\ufff1\046\ufff1\050\ufff1" +
    "\001\002\000\020\002\uffef\004\uffef\007\uffef\010\uffef\041" +
    "\uffef\046\uffef\050\uffef\001\002\000\004\050\042\001\002" +
    "\000\020\002\uffeb\004\uffeb\007\uffeb\010\uffeb\041\uffeb\046" +
    "\uffeb\050\uffeb\001\002\000\004\045\043\001\002\000\004" +
    "\040\044\001\002\000\004\045\045\001\002\000\022\002" +
    "\uffdf\004\uffdf\007\uffdf\010\uffdf\041\uffdf\042\046\046\uffdf" +
    "\050\uffdf\001\002\000\020\002\uffe0\004\uffe0\007\uffe0\010" +
    "\uffe0\041\uffe0\046\uffe0\050\uffe0\001\002\000\004\005\050" +
    "\001\002\000\004\047\051\001\002\000\022\002\uffe3\004" +
    "\uffe3\007\uffe3\010\uffe3\041\uffe3\042\052\046\uffe3\050\uffe3" +
    "\001\002\000\020\002\uffe4\004\uffe4\007\uffe4\010\uffe4\041" +
    "\uffe4\046\uffe4\050\uffe4\001\002\000\004\037\054\001\002" +
    "\000\004\050\055\001\002\000\006\005\056\006\057\001" +
    "\002\000\004\043\064\001\002\000\004\043\060\001\002" +
    "\000\004\044\061\001\002\000\004\047\062\001\002\000" +
    "\022\002\uffe1\004\uffe1\007\uffe1\010\uffe1\041\uffe1\042\063" +
    "\046\uffe1\050\uffe1\001\002\000\020\002\uffe2\004\uffe2\007" +
    "\uffe2\010\uffe2\041\uffe2\046\uffe2\050\uffe2\001\002\000\010" +
    "\037\067\044\070\050\071\001\002\000\006\044\uffe5\052" +
    "\104\001\002\000\004\044\101\001\002\000\004\050\077" +
    "\001\002\000\004\047\075\001\002\000\004\037\072\001" +
    "\002\000\004\050\073\001\002\000\004\005\074\001\002" +
    "\000\006\044\uffe7\052\uffe7\001\002\000\022\002\uffc2\004" +
    "\uffc2\007\uffc2\010\uffc2\041\uffc2\042\076\046\uffc2\050\uffc2" +
    "\001\002\000\020\002\uffc3\004\uffc3\007\uffc3\010\uffc3\041" +
    "\uffc3\046\uffc3\050\uffc3\001\002\000\004\005\100\001\002" +
    "\000\006\044\uffe8\052\uffe8\001\002\000\004\047\102\001" +
    "\002\000\022\002\uffc4\004\uffc4\007\uffc4\010\uffc4\041\uffc4" +
    "\042\103\046\uffc4\050\uffc4\001\002\000\020\002\uffc5\004" +
    "\uffc5\007\uffc5\010\uffc5\041\uffc5\046\uffc5\050\uffc5\001\002" +
    "\000\006\037\067\050\071\001\002\000\004\044\uffe6\001" +
    "\002\000\004\002\000\001\002\000\004\051\114\001\002" +
    "\000\006\051\112\052\111\001\002\000\020\002\uffc8\004" +
    "\uffc8\007\uffc8\010\uffc8\041\uffc8\046\uffc8\050\uffc8\001\002" +
    "\000\022\002\uffc9\004\uffc9\007\uffc9\010\uffc9\041\uffc9\042" +
    "\113\046\uffc9\050\uffc9\001\002\000\020\002\uffca\004\uffca" +
    "\007\uffca\010\uffca\041\uffca\046\uffca\050\uffca\001\002\000" +
    "\022\002\uffd2\004\uffd2\007\uffd2\010\uffd2\041\uffd2\042\115" +
    "\046\uffd2\050\uffd2\001\002\000\020\002\uffd3\004\uffd3\007" +
    "\uffd3\010\uffd3\041\uffd3\046\uffd3\050\uffd3\001\002\000\004" +
    "\047\140\001\002\000\004\047\136\001\002\000\004\050" +
    "\132\001\002\000\004\047\130\001\002\000\004\047\126" +
    "\001\002\000\004\047\124\001\002\000\022\002\uffdd\004" +
    "\uffdd\007\uffdd\010\uffdd\041\uffdd\042\125\046\uffdd\050\uffdd" +
    "\001\002\000\020\002\uffde\004\uffde\007\uffde\010\uffde\041" +
    "\uffde\046\uffde\050\uffde\001\002\000\022\002\uffd7\004\uffd7" +
    "\007\uffd7\010\uffd7\041\uffd7\042\127\046\uffd7\050\uffd7\001" +
    "\002\000\020\002\uffd8\004\uffd8\007\uffd8\010\uffd8\041\uffd8" +
    "\046\uffd8\050\uffd8\001\002\000\022\002\uffdb\004\uffdb\007" +
    "\uffdb\010\uffdb\041\uffdb\042\131\046\uffdb\050\uffdb\001\002" +
    "\000\020\002\uffdc\004\uffdc\007\uffdc\010\uffdc\041\uffdc\046" +
    "\uffdc\050\uffdc\001\002\000\004\055\133\001\002\000\004" +
    "\051\134\001\002\000\022\002\uffb0\004\uffb0\007\uffb0\010" +
    "\uffb0\041\uffb0\042\135\046\uffb0\050\uffb0\001\002\000\020" +
    "\002\uffb1\004\uffb1\007\uffb1\010\uffb1\041\uffb1\046\uffb1\050" +
    "\uffb1\001\002\000\022\002\uffce\004\uffce\007\uffce\010\uffce" +
    "\041\uffce\042\137\046\uffce\050\uffce\001\002\000\020\002" +
    "\uffcf\004\uffcf\007\uffcf\010\uffcf\041\uffcf\046\uffcf\050\uffcf" +
    "\001\002\000\022\002\uffbe\004\uffbe\007\uffbe\010\uffbe\041" +
    "\uffbe\042\141\046\uffbe\050\uffbe\001\002\000\020\002\uffbf" +
    "\004\uffbf\007\uffbf\010\uffbf\041\uffbf\046\uffbf\050\uffbf\001" +
    "\002\000\004\047\344\001\002\000\004\047\342\001\002" +
    "\000\004\050\332\001\002\000\004\047\330\001\002\000" +
    "\004\050\324\001\002\000\004\043\301\001\002\000\004" +
    "\050\270\001\002\000\004\043\254\001\002\000\004\047" +
    "\252\001\002\000\004\050\246\001\002\000\004\050\234" +
    "\001\002\000\004\043\221\001\002\000\004\050\166\001" +
    "\002\000\004\050\160\001\002\000\004\005\161\001\002" +
    "\000\004\043\162\001\002\000\004\044\163\001\002\000" +
    "\004\047\164\001\002\000\022\002\uffc6\004\uffc6\007\uffc6" +
    "\010\uffc6\041\uffc6\042\165\046\uffc6\050\uffc6\001\002\000" +
    "\020\002\uffc7\004\uffc7\007\uffc7\010\uffc7\041\uffc7\046\uffc7" +
    "\050\uffc7\001\002\000\006\035\170\036\167\001\002\000" +
    "\006\051\212\052\211\001\002\000\004\050\171\001\002" +
    "\000\010\005\173\054\172\055\174\001\002\000\004\051" +
    "\207\001\002\000\004\056\177\001\002\000\004\051\175" +
    "\001\002\000\022\002\uffb4\004\uffb4\007\uffb4\010\uffb4\041" +
    "\uffb4\042\176\046\uffb4\050\uffb4\001\002\000\020\002\uffb5" +
    "\004\uffb5\007\uffb5\010\uffb5\041\uffb5\046\uffb5\050\uffb5\001" +
    "\002\000\004\054\200\001\002\000\006\052\205\057\uffa9" +
    "\001\002\000\004\057\202\001\002\000\004\051\203\001" +
    "\002\000\022\002\uffa7\004\uffa7\007\uffa7\010\uffa7\041\uffa7" +
    "\042\204\046\uffa7\050\uffa7\001\002\000\020\002\uffa8\004" +
    "\uffa8\007\uffa8\010\uffa8\041\uffa8\046\uffa8\050\uffa8\001\002" +
    "\000\006\054\200\057\uffaa\001\002\000\004\057\uffab\001" +
    "\002\000\022\002\uffb7\004\uffb7\007\uffb7\010\uffb7\041\uffb7" +
    "\042\210\046\uffb7\050\uffb7\001\002\000\020\002\uffb6\004" +
    "\uffb6\007\uffb6\010\uffb6\041\uffb6\046\uffb6\050\uffb6\001\002" +
    "\000\006\046\215\050\216\001\002\000\022\002\uffd5\004" +
    "\uffd5\007\uffd5\010\uffd5\041\uffd5\042\213\046\uffd5\050\uffd5" +
    "\001\002\000\020\002\uffd6\004\uffd6\007\uffd6\010\uffd6\041" +
    "\uffd6\046\uffd6\050\uffd6\001\002\000\020\002\uffd4\004\uffd4" +
    "\007\uffd4\010\uffd4\041\uffd4\046\uffd4\050\uffd4\001\002\000" +
    "\004\005\217\001\002\000\004\036\107\001\002\000\004" +
    "\050\220\001\002\000\004\036\167\001\002\000\004\005" +
    "\222\001\002\000\004\050\223\001\002\000\004\031\224" +
    "\001\002\000\004\050\225\001\002\000\004\005\226\001" +
    "\002\000\004\044\227\001\002\000\004\050\230\001\002" +
    "\000\004\027\231\001\002\000\004\047\232\001\002\000" +
    "\022\002\uffa3\004\uffa3\007\uffa3\010\uffa3\041\uffa3\042\233" +
    "\046\uffa3\050\uffa3\001\002\000\020\002\uffa4\004\uffa4\007" +
    "\uffa4\010\uffa4\041\uffa4\046\uffa4\050\uffa4\001\002\000\004" +
    "\035\235\001\002\000\004\050\236\001\002\000\004\034" +
    "\237\001\002\000\004\050\240\001\002\000\004\032\241" +
    "\001\002\000\004\050\242\001\002\000\004\054\243\001" +
    "\002\000\004\051\244\001\002\000\004\042\245\001\002" +
    "\000\020\002\uffa2\004\uffa2\007\uffa2\010\uffa2\041\uffa2\046" +
    "\uffa2\050\uffa2\001\002\000\004\005\247\001\002\000\004" +
    "\051\250\001\002\000\022\002\uffac\004\uffac\007\uffac\010" +
    "\uffac\041\uffac\042\251\046\uffac\050\uffac\001\002\000\020" +
    "\002\uffad\004\uffad\007\uffad\010\uffad\041\uffad\046\uffad\050" +
    "\uffad\001\002\000\022\002\uffb8\004\uffb8\007\uffb8\010\uffb8" +
    "\041\uffb8\042\253\046\uffb8\050\uffb8\001\002\000\020\002" +
    "\uffb9\004\uffb9\007\uffb9\010\uffb9\041\uffb9\046\uffb9\050\uffb9" +
    "\001\002\000\004\005\262\001\002\000\004\050\256\001" +
    "\002\000\004\017\257\001\002\000\004\047\260\001\002" +
    "\000\004\042\261\001\002\000\020\002\uffbc\004\uffbc\007" +
    "\uffbc\010\uffbc\041\uffbc\046\uffbc\050\uffbc\001\002\000\004" +
    "\050\263\001\002\000\004\033\264\001\002\000\004\050" +
    "\265\001\002\000\004\054\266\001\002\000\004\044\267" +
    "\001\002\000\004\050\uffbd\001\002\000\004\055\271\001" +
    "\002\000\006\051\273\052\272\001\002\000\004\050\275" +
    "\001\002\000\022\002\uffb2\004\uffb2\007\uffb2\010\uffb2\041" +
    "\uffb2\042\274\046\uffb2\050\uffb2\001\002\000\020\002\uffb3" +
    "\004\uffb3\007\uffb3\010\uffb3\041\uffb3\046\uffb3\050\uffb3\001" +
    "\002\000\004\005\276\001\002\000\004\051\277\001\002" +
    "\000\022\002\uffae\004\uffae\007\uffae\010\uffae\041\uffae\042" +
    "\300\046\uffae\050\uffae\001\002\000\020\002\uffaf\004\uffaf" +
    "\007\uffaf\010\uffaf\041\uffaf\046\uffaf\050\uffaf\001\002\000" +
    "\004\005\302\001\002\000\004\035\303\001\002\000\004" +
    "\054\304\001\002\000\004\050\305\001\002\000\004\025" +
    "\306\001\002\000\004\050\307\001\002\000\004\005\310" +
    "\001\002\000\004\060\311\001\002\000\004\054\312\001" +
    "\002\000\004\050\313\001\002\000\004\026\314\001\002" +
    "\000\004\050\315\001\002\000\004\054\316\001\002\000" +
    "\004\044\317\001\002\000\004\050\320\001\002\000\004" +
    "\027\321\001\002\000\004\047\322\001\002\000\022\002" +
    "\uffa5\004\uffa5\007\uffa5\010\uffa5\041\uffa5\042\323\046\uffa5" +
    "\050\uffa5\001\002\000\020\002\uffa6\004\uffa6\007\uffa6\010" +
    "\uffa6\041\uffa6\046\uffa6\050\uffa6\001\002\000\004\054\325" +
    "\001\002\000\004\051\326\001\002\000\022\002\uffba\004" +
    "\uffba\007\uffba\010\uffba\041\uffba\042\327\046\uffba\050\uffba" +
    "\001\002\000\020\002\uffbb\004\uffbb\007\uffbb\010\uffbb\041" +
    "\uffbb\046\uffbb\050\uffbb\001\002\000\022\002\uffd0\004\uffd0" +
    "\007\uffd0\010\uffd0\041\uffd0\042\331\046\uffd0\050\uffd0\001" +
    "\002\000\020\002\uffd1\004\uffd1\007\uffd1\010\uffd1\041\uffd1" +
    "\046\uffd1\050\uffd1\001\002\000\004\005\333\001\002\000" +
    "\006\051\335\052\334\001\002\000\006\046\341\050\340" +
    "\001\002\000\022\002\uffcc\004\uffcc\007\uffcc\010\uffcc\041" +
    "\uffcc\042\336\046\uffcc\050\uffcc\001\002\000\020\002\uffcd" +
    "\004\uffcd\007\uffcd\010\uffcd\041\uffcd\046\uffcd\050\uffcd\001" +
    "\002\000\020\002\uffcb\004\uffcb\007\uffcb\010\uffcb\041\uffcb" +
    "\046\uffcb\050\uffcb\001\002\000\004\005\110\001\002\000" +
    "\004\037\144\001\002\000\022\002\uffd9\004\uffd9\007\uffd9" +
    "\010\uffd9\041\uffd9\042\343\046\uffd9\050\uffd9\001\002\000" +
    "\020\002\uffda\004\uffda\007\uffda\010\uffda\041\uffda\046\uffda" +
    "\050\uffda\001\002\000\022\002\uffc0\004\uffc0\007\uffc0\010" +
    "\uffc0\041\uffc0\042\345\046\uffc0\050\uffc0\001\002\000\020" +
    "\002\uffc1\004\uffc1\007\uffc1\010\uffc1\041\uffc1\046\uffc1\050" +
    "\uffc1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\062\002\003\003\013\004\022\005\027\006" +
    "\004\007\024\010\014\011\007\012\032\013\016\014\011" +
    "\015\025\016\005\017\030\022\015\024\033\025\035\026" +
    "\026\027\036\030\017\032\031\033\023\034\040\035\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\002\105\003" +
    "\013\004\022\005\027\006\004\007\024\010\014\011\007" +
    "\012\032\013\016\014\011\015\025\016\005\017\030\022" +
    "\015\024\033\025\035\026\026\027\036\030\017\032\031" +
    "\033\023\034\040\035\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\064\021" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\064\021\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



//El código que vaya acá se va a poner en EjemploSintactico.java
@Override
    public void syntax_error(Symbol cur_token) {
        Tokens t = (Tokens)cur_token.value;
        done_parsing(); //Finaliza la ejecución al encontrar un error
        report_error("Error sintáctico: [" + t.getRow() + ", " + t.getCol() + "]: " 
                +t.getLexema(), null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalisisSintactico$actions {
  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ACCEDERPROPIEDAD ::= TABS PROPIEDADID ESPBLANCO IGUAL ESPBLANCO PROPIEDADID ESPBLANCO SUMA ESPBLANCO NUMERO PCOMA FINLINEA 
            {
              Object RESULT =null;
		
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ACCEDERPROPIEDAD",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CICLOPARACADA ::= TABS PALCLAVPARACADA PARENABRE IDENTIFICADOR ESPBLANCO PALCLAVEN ESPBLANCO IDENTIFICADOR PARENCIERRA ESPBLANCO PALCLAVITERAR DOSPUNTOS 
            {
              Object RESULT =null;
		
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CICLOPARACADA",27, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CICLOPARACADA ::= TABS PALCLAVPARACADA PARENABRE IDENTIFICADOR ESPBLANCO PALCLAVEN ESPBLANCO IDENTIFICADOR PARENCIERRA ESPBLANCO PALCLAVITERAR DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CICLOPARACADA",27, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CICLODESDE ::= TABS PALCLAVDESDE PARENABRE IDENTIFICADOR IGUAL NUMERO ESPBLANCO PALCLAVMIENTRAS ESPBLANCO IDENTIFICADOR MENORQUE NUMERO ESPBLANCO PALCLAVINC ESPBLANCO NUMERO PARENCIERRA ESPBLANCO PALCLAVITERAR DOSPUNTOS 
            {
              Object RESULT =null;
		
        //System.out.println("Ciclo desde desde");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CICLODESDE",25, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-19)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CICLODESDE ::= TABS PALCLAVDESDE PARENABRE IDENTIFICADOR IGUAL NUMERO ESPBLANCO PALCLAVMIENTRAS ESPBLANCO IDENTIFICADOR MENORQUE NUMERO ESPBLANCO PALCLAVINC ESPBLANCO NUMERO PARENCIERRA ESPBLANCO PALCLAVITERAR DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		
        //System.out.println("Ciclo desde desde");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CICLODESDE",25, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-20)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERACIONARCHIVOS ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO IDENTIFICADOR CORCHABRE VARIABLEARCHIVO CORCHCIERRA PCOMA 
            {
              Object RESULT =null;
		
       //System.out.println("Operando archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONARCHIVOS",24, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACIONARCHIVOS ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO IDENTIFICADOR CORCHABRE VARIABLEARCHIVO CORCHCIERRA PCOMA FINLINEA 
            {
              Object RESULT =null;
		
       //System.out.println("Operando archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONARCHIVOS",24, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARIABLEARCHIVO ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println("número: " + n.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLEARCHIVO",23, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARIABLEARCHIVO ::= NUMERO COMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println("número, coma" + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLEARCHIVO",23, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARIABLEARCHIVO ::= NUMERO COMA VARIABLEARCHIVO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println("más de un dato" + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLEARCHIVO",23, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ABRIENDOEXCEL ::= TABS PALCLAVABRIR ESPBLANCO IDENTIFICADOR PCOMA 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pca.getLexema() + " " + id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIENDOEXCEL",22, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ABRIENDOEXCEL ::= TABS PALCLAVABRIR ESPBLANCO IDENTIFICADOR PCOMA FINLINEA 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pca.getLexema() + " " + id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIENDOEXCEL",22, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONCATENAR ::= TABS PALCLAVESCRIBIR ESPBLANCO MENSAJE COMA ESPBLANCO IDENTIFICADOR PCOMA 
            {
              Object RESULT =null;
		
        //System.out.println("Concatenación x2");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CONCATENAR",26, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONCATENAR ::= TABS PALCLAVESCRIBIR ESPBLANCO MENSAJE COMA ESPBLANCO IDENTIFICADOR PCOMA FINLINEA 
            {
              Object RESULT =null;
		
        //System.out.println("Concatenación x2");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CONCATENAR",26, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ESCRIBIRTEXTO ::= TAB PALCLAVESCRIBIR ESPBLANCO MENSAJE PCOMA 
            {
              Object RESULT =null;
		int pceleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pceright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pce = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens m = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pce.getLexema() + " " + m.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ESCRIBIRTEXTO",21, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ESCRIBIRTEXTO ::= TAB PALCLAVESCRIBIR ESPBLANCO MENSAJE PCOMA FINLINEA 
            {
              Object RESULT =null;
		int pceleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pceright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pce = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens m = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pce.getLexema() + " " + m.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ESCRIBIRTEXTO",21, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ESCRIBIRTEXTO ::= TABS PALCLAVESCRIBIR ESPBLANCO MENSAJE PCOMA 
            {
              Object RESULT =null;
		int pceleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pceright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pce = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens m = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pce.getLexema() + " " + m.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ESCRIBIRTEXTO",21, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ESCRIBIRTEXTO ::= TABS PALCLAVESCRIBIR ESPBLANCO MENSAJE PCOMA FINLINEA 
            {
              Object RESULT =null;
		int pceleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pceright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pce = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens m = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pce.getLexema() + " " + m.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ESCRIBIRTEXTO",21, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNACION ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO MENSAJE PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens m = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(id.getLexema() + " " + i.getLexema() + " " + m.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNACION ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO MENSAJE PCOMA FINLINEA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(id.getLexema() + " " + i.getLexema() + c.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO NUMERO PCOMA FINLINEA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(id.getLexema() + " " + i.getLexema() + " " + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNACION ::= TABS IDENTIFICADOR ESPBLANCO IGUAL ESPBLANCO NUMERO PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(id.getLexema() + " " + i.getLexema() + " " + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECSINO ::= TABS PALCLAVSINO DOSPUNTOS 
            {
              Object RESULT =null;
		int pcsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcs = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pcs.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECSINO",19, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECSINO ::= TABS PALCLAVSINO DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcs = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcs.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECSINO",19, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RETORNAR ::= TABS PALCLAVRETORNAR ESPBLANCO NUMERO PCOMA 
            {
              Object RESULT =null;
		int pcrleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pcrright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pcr = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pcr.getLexema()+ " " + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",18, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RETORNAR ::= TABS PALCLAVRETORNAR ESPBLANCO NUMERO PCOMA FINLINEA 
            {
              Object RESULT =null;
		int pcrleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pcrright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pcr = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens n = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcr.getLexema()+ " " + n.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",18, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECCONDICION ::= TABS PALCLAVSI CONDICION ESPBLANCO PALCLAVENTONCES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int pcsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens pcs = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int pceleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pceright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pce = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcs.getLexema() + " condición " + pce.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCONDICION",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDICION ::= PARENABRE IDENTIFICADOR ESPBLANCO OPMATEMATICO ESPBLANCO NUMERO PARENCIERRA 
            {
              Object RESULT =null;
		
        //System.out.println("Condición");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECCODIGO ::= TAB PALCLAVCODIGO DOSPUNTOS 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pcc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCODIGO",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECCODIGO ::= TAB PALCLAVCODIGO DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCODIGO",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECCODIGO ::= TABS PALCLAVCODIGO DOSPUNTOS 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pcc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCODIGO",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECCODIGO ::= TABS PALCLAVCODIGO DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCODIGO",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECFUNCION ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR PARENABRE PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + id.getLexema() + pa.getLexema() + 
            //pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECFUNCION ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR PARENABRE PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + id.getLexema() + pa.getLexema() + 
            //pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECFUNCION ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR PARENABRE PARAMETROS PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + id.getLexema() + pa.getLexema() + 
            //pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECFUNCION ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR PARENABRE PARAMETROS PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + id.getLexema() + pa.getLexema() + 
            //pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECFUNCION ::= TABS PALCLAVFUNCION ESPBLANCO IDENTIFICADOR PARENABRE PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pcf.getLexema() + " " + id.getLexema() + pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECFUNCION ::= TABS PALCLAVFUNCION ESPBLANCO IDENTIFICADOR PARENABRE PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcf.getLexema() + " " + id.getLexema() + pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARARVARIABLES ::= ESPBLANCO IDENTIFICADOR COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(id.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARARVARIABLES ::= ESPBLANCO IDENTIFICADOR PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARARVARIABLES ::= ESPBLANCO IDENTIFICADOR PCOMA FINLINEA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARARVARIABLES ::= TABS TIPODEDATO ESPBLANCO IDENTIFICADOR COMA DECLARARVARIABLES 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(tdd.getLexema() + " " + id.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARARVARIABLES ::= TABS TIPODEDATO ESPBLANCO IDENTIFICADOR PCOMA 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(tdd.getLexema() + " " + id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARARVARIABLES ::= TABS TIPODEDATO ESPBLANCO IDENTIFICADOR PCOMA FINLINEA 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println("Una sola variable " + tdd.getLexema() + " " + id.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLES",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARPALCLAVVARIABLES ::= TAB PALCLAVVARIABLES DOSPUNTOS 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARPALCLAVVARIABLES ::= TAB PALCLAVVARIABLES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARPALCLAVVARIABLES ::= TABS PALCLAVVARIABLES DOSPUNTOS 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARPALCLAVVARIABLES ::= TABS PALCLAVVARIABLES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcvleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcvright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcv = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcv.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPALCLAVVARIABLES",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ABRIREXCEL ::= ESPBLANCO ARCHIVOEXCEL PCOMA 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(ae.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ABRIREXCEL ::= ESPBLANCO ARCHIVOEXCEL PCOMA FINLINEA 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(ae.getLexema() + pc.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ABRIREXCEL ::= TABS IDENTIFICADOR ESPBLANCO ARCHIVOEXCEL COMA ABRIREXCEL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(id.getLexema() + " " +c.getLexema() + " " + ae.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ABRIREXCEL ::= TABS IDENTIFICADOR ESPBLANCO ARCHIVOEXCEL PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(id.getLexema() + " " + ae.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ABRIREXCEL ::= TABS IDENTIFICADOR ESPBLANCO ARCHIVOEXCEL PCOMA FINLINEA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens ae = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
        //System.out.println(id.getLexema() + " " + ae.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ABRIREXCEL",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARARCHIVOS ::= TAB PALCLAVARCHIVOS DOSPUNTOS 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARARCHIVOS ::= TAB PALCLAVARCHIVOS DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARARCHIVOS ::= TABS PALCLAVARCHIVOS DOSPUNTOS 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARARCHIVOS ::= TABS PALCLAVARCHIVOS DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pca = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pca.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCHIVOS",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARMETODOS ::= TAB PALCLAVMETODOS DOSPUNTOS 
            {
              Object RESULT =null;
		int pcmleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcmright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcm = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pcm.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARMETODOS",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARMETODOS ::= TAB PALCLAVMETODOS DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcmleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcmright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcm = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcm.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARMETODOS",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARPROPIEDADES ::= TAB PALCLAVPROPIEDADES DOSPUNTOS 
            {
              Object RESULT =null;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pcp.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPROPIEDADES",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARPROPIEDADES ::= TAB PALCLAVPROPIEDADES DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcp.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECLARPROPIEDADES",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMPORTARARCHIVOS ::= PALCLAVINCLUIR ESPBLANCO COMILLAS ARCHIVOLED COMILLAS 
            {
              Object RESULT =null;
		int pcileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pciright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pci = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int aledleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aledright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens aled = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pci.getLexema() + " " + c.getLexema() + aled.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTARARCHIVOS",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IMPORTARARCHIVOS ::= PALCLAVINCLUIR ESPBLANCO COMILLAS ARCHIVOLED COMILLAS FINLINEA 
            {
              Object RESULT =null;
		int pcileft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int pciright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens pci = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int aledleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aledright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens aled = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
        //System.out.println(pci.getLexema() + " " + c.getLexema() + aled.getLexema() + c.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTARARCHIVOS",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECFUNCIONPRIN ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO PALCLAVPRINCIPAL PARENABRE PARENCIERRA DOSPUNTOS 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 
        //System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + pcp.getLexema() +
                //pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCIONPRIN",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECFUNCIONPRIN ::= PALCLAVFUNCION ESPBLANCO TIPODEDATO ESPBLANCO PALCLAVPRINCIPAL PARENABRE PARENCIERRA DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pcfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int pcfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		Tokens pcf = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pcp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pa = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens pc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcf.getLexema() + " " + tdd.getLexema() + " " + pcp.getLexema() +
                //pa.getLexema() + pc.getLexema() + dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCIONPRIN",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECCLASE ::= PALCLAVCLASE ESPBLANCO IDENTIFICADOR DOSPUNTOS 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(pcc.getLexema() + " " +id.getLexema() +dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCLASE",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECCLASE ::= PALCLAVCLASE ESPBLANCO IDENTIFICADOR DOSPUNTOS FINLINEA 
            {
              Object RESULT =null;
		int pccleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pccright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Tokens pcc = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Tokens dp = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        //System.out.println(pcc.getLexema() + " " +id.getLexema() +dp.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DECCLASE",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;
		
        //System.out.println("Varios parámetros" );
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETROS ::= PARAMETRO COMA PARAMETROS 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETRO ::= ESPBLANCO TIPODEDATO ESPBLANCO IDENTIFICADOR 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(tdd.getLexema() + " " + id.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETRO ::= TIPODEDATO ESPBLANCO IDENTIFICADOR 
            {
              Object RESULT =null;
		int tddleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Tokens tdd = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Tokens id = (Tokens)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        //System.out.println(tdd.getLexema() + " " + id.getLexema());
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= ACCEDERPROPIEDAD 
            {
              Object RESULT =null;
		
        System.out.println("Accediendo a propiedad");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= CICLOPARACADA 
            {
              Object RESULT =null;
		
        System.out.println("Ciclo paracada");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= CONCATENAR 
            {
              Object RESULT =null;
		
        System.out.println("Concatenación");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= CICLODESDE 
            {
              Object RESULT =null;
		
        System.out.println("Ciclo desde");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= OPERACIONARCHIVOS 
            {
              Object RESULT =null;
		
        System.out.println("Trabajando con archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= ABRIENDOEXCEL 
            {
              Object RESULT =null;
		
        System.out.println("Abrir excel");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= ESCRIBIRTEXTO 
            {
              Object RESULT =null;
		
        System.out.println("Escribiendo mensaje");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= ASIGNACION 
            {
              Object RESULT =null;
		
        System.out.println("Asignación");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= DECSINO 
            {
              Object RESULT =null;
		
        System.out.println("Sino");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= RETORNAR 
            {
              Object RESULT =null;
		
        System.out.println("Retorno");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= DECCONDICION 
            {
              Object RESULT =null;
		
        System.out.println("Declarando condición");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= DECCODIGO 
            {
              Object RESULT =null;
		
        System.out.println("Declarando inicio de código");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= DECFUNCION 
            {
              Object RESULT =null;
		
        System.out.println("Declarando funciones");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= DECLARARVARIABLES 
            {
              Object RESULT =null;
		
        System.out.println("Declarando variables");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= DECLARPALCLAVVARIABLES 
            {
              Object RESULT =null;
		
        System.out.println("Abriendo inicio de declaración de variables");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= ABRIREXCEL 
            {
              Object RESULT =null;
		
        System.out.println("Abriendo excel");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= DECLARARCHIVOS 
            {
              Object RESULT =null;
		
        System.out.println("Declarando archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= DECLARMETODOS 
            {
              Object RESULT =null;
		
        System.out.println("Declarando métodos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= DECLARPROPIEDADES 
            {
              Object RESULT =null;
		
        System.out.println("Declarando propiedades");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= IMPORTARARCHIVOS 
            {
              Object RESULT =null;
		
        System.out.println("Incluyendo archivos");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= DECFUNCIONPRIN 
            {
              Object RESULT =null;
		
        System.out.println("Declaración de función principal");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresion ::= DECCLASE 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        System.out.println("Declaración de clase");
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expresiones ::= expresion expresiones 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expresiones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

