/* The following code was generated by JFlex 1.6.1 */

package proyectocompiladores;
import proyectocompiladores.ArrayListTokens;
import java.util.ArrayList;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/herramientas/lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\14\1\15\1\15\1\15\22\0\1\15\1\32\1\24"+
    "\2\0\1\51\2\0\1\23\1\23\1\51\1\35\1\23\1\36\1\30"+
    "\1\22\1\16\11\17\1\26\1\25\1\34\1\31\1\33\2\0\1\52"+
    "\2\20\1\54\11\20\1\53\1\55\2\20\1\56\10\20\1\23\1\0"+
    "\1\23\1\51\1\27\1\0\1\2\1\12\1\1\1\3\1\4\1\45"+
    "\1\47\1\50\1\42\2\21\1\13\1\7\1\5\1\11\1\41\1\21"+
    "\1\10\1\37\1\40\1\6\1\46\1\21\1\44\1\43\1\21\12\0"+
    "\1\15\32\0\1\15\u15df\0\1\15\u097f\0\13\15\35\0\1\15\1\15"+
    "\5\0\1\15\57\0\1\15\u0fa0\0\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\11\1\1\3\2\4\1\1\1\5\2\6"+
    "\1\7\1\10\1\1\1\6\1\5\1\2\1\11\1\12"+
    "\2\5\5\1\1\5\7\1\1\0\3\1\1\13\6\1"+
    "\2\0\1\14\7\0\1\15\1\16\1\13\7\1\1\17"+
    "\16\1\1\20\11\0\27\1\4\0\1\21\1\22\2\0"+
    "\1\13\12\1\1\23\1\1\1\24\10\1\1\0\1\25"+
    "\1\0\7\1\1\26\6\1\1\0\10\1\1\0\6\1"+
    "\1\0\2\1\1\24\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\57\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\57\0\u02c1\0\57\0\57\0\u02f0\0\u031f\0\u034e\0\u037d"+
    "\0\57\0\57\0\u03ac\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497"+
    "\0\u04c6\0\57\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u0205"+
    "\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729"+
    "\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u02c1\0\57\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\57\0\57"+
    "\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0263\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e"+
    "\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0814"+
    "\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf"+
    "\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057"+
    "\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf"+
    "\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347"+
    "\0\u1376\0\u13a5\0\u13d4\0\u1403\0\57\0\57\0\u1432\0\u1461"+
    "\0\u0149\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa"+
    "\0\u15d9\0\u1608\0\u1637\0\u0149\0\u1666\0\u0149\0\u1695\0\u16c4"+
    "\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\57"+
    "\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985"+
    "\0\u0149\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace"+
    "\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46"+
    "\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe"+
    "\0\u1ded\0\u1e1c\0\u1d60\0\u0149";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\10\1\13\1\10\2\14\1\15\1\16\1\17"+
    "\1\10\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\10"+
    "\1\36\1\37\2\10\1\40\1\41\2\10\1\42\1\43"+
    "\2\17\1\44\1\17\60\0\1\10\1\45\6\10\1\46"+
    "\1\10\1\47\2\0\1\50\1\51\1\17\1\10\5\0"+
    "\1\25\1\52\6\0\12\10\1\0\5\17\1\0\7\10"+
    "\1\53\1\10\1\54\1\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\12\10\1\0\5\17"+
    "\1\0\3\10\1\55\7\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\12\10\1\0\5\17"+
    "\1\0\4\10\1\56\6\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\1\57\11\10\1\0"+
    "\5\17\1\0\5\10\1\60\5\10\2\0\1\50\1\51"+
    "\1\17\1\10\5\0\1\25\1\52\6\0\12\10\1\0"+
    "\5\17\1\0\13\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\3\10\1\61\7\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\3\10\1\62\6\10\1\0"+
    "\5\17\1\0\3\10\1\63\7\10\2\0\1\50\1\51"+
    "\1\17\1\10\5\0\1\25\1\52\6\0\12\10\1\0"+
    "\5\17\1\0\10\10\1\64\2\10\2\0\1\50\1\51"+
    "\1\17\1\10\5\0\1\25\1\52\6\0\12\10\1\0"+
    "\5\17\30\0\1\52\44\0\2\16\10\0\1\52\27\0"+
    "\13\17\2\0\1\50\1\51\2\17\6\0\1\52\6\0"+
    "\12\17\1\0\5\17\22\0\1\65\35\0\15\66\2\0"+
    "\2\66\2\0\1\67\12\0\12\66\1\0\5\66\1\0"+
    "\13\25\2\0\2\51\2\25\6\0\1\52\6\0\12\25"+
    "\1\0\5\25\7\0\1\70\1\71\1\72\1\0\1\73"+
    "\23\0\1\74\1\0\1\75\2\0\1\76\43\0\1\77"+
    "\56\0\1\100\62\0\1\42\57\0\1\42\21\0\13\10"+
    "\2\0\1\50\1\51\1\17\1\10\5\0\1\25\1\52"+
    "\6\0\3\10\1\101\6\10\1\0\5\17\1\0\1\10"+
    "\1\102\5\10\1\103\3\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\12\10\1\0\5\17"+
    "\1\0\4\10\1\104\6\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\1\10\1\105\10\10"+
    "\1\0\5\17\1\0\5\10\1\106\5\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\1\10\1\107\11\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\13\17\2\0\1\50\1\51\2\17"+
    "\6\0\1\52\6\0\12\17\1\0\1\17\1\110\3\17"+
    "\1\0\13\17\2\0\1\50\1\51\2\17\6\0\1\52"+
    "\6\0\12\17\1\0\4\17\1\111\1\0\2\10\1\112"+
    "\10\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\12\10\1\0\5\17\1\0\2\10\1\113"+
    "\10\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\12\10\1\0\5\17\1\0\1\10\1\114"+
    "\11\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\12\10\1\0\5\17\16\0\2\51\10\0"+
    "\1\52\37\0\1\72\1\0\1\73\30\0\1\76\13\0"+
    "\1\115\12\10\2\0\1\50\1\51\1\17\1\10\5\0"+
    "\1\25\1\52\6\0\12\10\1\0\5\17\1\0\7\10"+
    "\1\116\3\10\2\0\1\50\1\51\1\17\1\10\5\0"+
    "\1\25\1\52\6\0\12\10\1\0\5\17\1\0\1\117"+
    "\12\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\1\120\11\10\1\0\5\17\1\0\13\10"+
    "\2\0\1\50\1\51\1\17\1\10\5\0\1\25\1\52"+
    "\6\0\1\10\1\121\10\10\1\0\5\17\1\0\1\122"+
    "\12\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\12\10\1\0\5\17\1\0\6\10\1\123"+
    "\4\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\12\10\1\0\5\17\1\0\13\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\1\10\1\124\10\10\1\0\5\17\1\0\3\10\1\125"+
    "\7\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\12\10\1\0\5\17\1\0\13\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\1\10\1\126\10\10\1\0\5\17\1\0\10\10\1\127"+
    "\2\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\12\10\1\0\5\17\1\0\13\65\1\130"+
    "\1\65\2\0\2\65\15\0\12\65\1\0\5\65\2\0"+
    "\1\131\1\0\1\132\4\0\1\133\51\0\1\134\55\0"+
    "\1\135\57\0\1\136\60\0\1\137\60\0\1\140\105\0"+
    "\1\141\20\0\4\10\1\142\6\10\2\0\1\50\1\51"+
    "\1\17\1\10\5\0\1\25\1\52\6\0\12\10\1\0"+
    "\5\17\1\0\7\10\1\143\3\10\2\0\1\50\1\51"+
    "\1\17\1\10\5\0\1\25\1\52\6\0\12\10\1\0"+
    "\5\17\1\0\10\10\1\144\2\10\2\0\1\50\1\51"+
    "\1\17\1\10\5\0\1\25\1\52\6\0\3\10\1\145"+
    "\6\10\1\0\5\17\1\0\1\146\12\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\1\147"+
    "\11\10\1\0\5\17\1\0\3\10\1\150\7\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\12\10\1\0\5\17\1\0\4\10\1\151\6\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\12\10\1\0\5\17\1\0\7\10\1\152\3\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\12\10\1\0\5\17\1\0\13\17\2\0\1\50\1\51"+
    "\2\17\6\0\1\52\6\0\12\17\1\0\2\17\1\111"+
    "\2\17\1\0\3\10\1\153\7\10\2\0\1\50\1\51"+
    "\1\17\1\10\5\0\1\25\1\52\6\0\12\10\1\0"+
    "\5\17\1\0\13\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\3\10\1\154\6\10\1\0"+
    "\5\17\1\0\13\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\1\155\11\10\1\0\5\17"+
    "\1\0\13\10\2\0\1\50\1\51\1\17\1\10\5\0"+
    "\1\25\1\52\6\0\11\10\1\156\1\0\5\17\1\0"+
    "\13\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\3\10\1\157\6\10\1\0\5\17\1\0"+
    "\7\10\1\160\3\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\2\10\1\161\10\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\10\10\1\162\2\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\7\10\1\163\3\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\3\10\1\164\7\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\10\10\1\165\2\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\4\10\1\166\6\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\10\10\1\167\2\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\12\10\1\170\2\0\1\50\1\51\1\17\1\10\5\0"+
    "\1\25\1\52\6\0\12\10\1\0\5\17\43\0\1\171"+
    "\16\0\1\172\1\0\1\171\54\0\1\173\112\0\1\174"+
    "\56\0\1\175\22\0\1\176\62\0\1\173\60\0\1\177"+
    "\60\0\1\200\44\0\10\10\1\201\2\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\1\10\1\202\11\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\13\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\2\10\1\203\7\10"+
    "\1\0\5\17\1\0\4\10\1\204\6\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\7\10\1\160\2\10\1\205\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\12\10\1\0\5\17\1\0\13\10\2\0\1\50\1\51"+
    "\1\17\1\10\5\0\1\25\1\52\6\0\1\10\1\206"+
    "\10\10\1\0\5\17\1\0\7\10\1\207\3\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\12\10\1\0\5\17\1\0\1\210\12\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\13\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\3\10\1\211\6\10"+
    "\1\0\5\17\1\0\4\10\1\212\6\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\13\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\10\10\1\213\1\10"+
    "\1\0\5\17\1\0\3\10\1\214\7\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\13\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\3\10\1\215\6\10"+
    "\1\0\5\17\1\0\7\10\1\216\3\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\3\10\1\217\7\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\3\10\1\201\7\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\4\10\1\220\6\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\13\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\3\10\1\221\6\10"+
    "\1\0\5\17\1\0\7\10\1\222\3\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\2\10\1\223\10\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\13\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\1\10\1\224\10\10"+
    "\1\0\5\17\1\0\7\10\1\225\3\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\1\0\3\10\1\226\7\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\12\10"+
    "\1\0\5\17\11\0\1\227\107\0\1\173\16\0\1\230"+
    "\114\0\1\173\25\0\1\231\113\0\1\175\13\0\1\232"+
    "\12\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\12\10\1\0\5\17\1\0\13\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\3\10\1\233\6\10\1\0\5\17\1\0\1\234\12\10"+
    "\2\0\1\50\1\51\1\17\1\10\5\0\1\25\1\52"+
    "\6\0\12\10\1\0\5\17\1\0\5\10\1\116\5\10"+
    "\2\0\1\50\1\51\1\17\1\10\5\0\1\25\1\52"+
    "\6\0\12\10\1\0\5\17\1\0\1\10\1\235\11\10"+
    "\2\0\1\50\1\51\1\17\1\10\5\0\1\25\1\52"+
    "\6\0\12\10\1\0\5\17\1\0\1\10\1\236\11\10"+
    "\2\0\1\50\1\51\1\17\1\10\5\0\1\25\1\52"+
    "\6\0\12\10\1\0\5\17\1\0\13\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\3\10"+
    "\1\237\6\10\1\0\5\17\1\0\1\10\1\240\11\10"+
    "\2\0\1\50\1\51\1\17\1\10\5\0\1\25\1\52"+
    "\6\0\12\10\1\0\5\17\1\0\1\10\1\241\11\10"+
    "\2\0\1\50\1\51\1\17\1\10\5\0\1\25\1\52"+
    "\6\0\12\10\1\0\5\17\1\0\10\10\1\216\2\10"+
    "\2\0\1\50\1\51\1\17\1\10\5\0\1\25\1\52"+
    "\6\0\12\10\1\0\5\17\1\0\13\10\2\0\1\50"+
    "\1\51\1\17\1\10\5\0\1\25\1\52\6\0\7\10"+
    "\1\223\2\10\1\0\5\17\1\0\6\10\1\242\4\10"+
    "\2\0\1\50\1\51\1\17\1\10\5\0\1\25\1\52"+
    "\6\0\12\10\1\0\5\17\1\0\1\243\12\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\12\10\1\0\5\17\1\0\11\10\1\116\1\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\12\10\1\0\5\17\1\0\10\10\1\241\2\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\12\10\1\0\5\17\1\0\10\10\1\244\2\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\12\10\1\0\5\17\1\0\7\10\1\245\3\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\12\10\1\0\5\17\1\0\4\10\1\246\6\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\12\10\1\0\5\17\1\0\1\10\1\247\11\10\2\0"+
    "\1\50\1\51\1\17\1\10\5\0\1\25\1\52\6\0"+
    "\12\10\1\0\5\17\10\0\1\230\52\0\1\250\53\0"+
    "\1\10\1\251\11\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\3\10\1\252\7\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\13\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\3\10\1\253\6\10\1\0\5\17\1\0"+
    "\4\10\1\254\6\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\7\10\1\201\3\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\10\10\1\255\2\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\11\10\1\256\1\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\3\10\1\257\7\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\3\10\1\260\7\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\13\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\1\216\11\10\1\0\5\17\1\0\1\10"+
    "\1\260\11\10\2\0\1\50\1\51\1\17\1\10\5\0"+
    "\1\25\1\52\6\0\12\10\1\0\5\17\1\0\1\10"+
    "\1\157\11\10\2\0\1\50\1\51\1\17\1\10\5\0"+
    "\1\25\1\52\6\0\12\10\1\0\5\17\1\0\4\10"+
    "\1\222\6\10\2\0\1\50\1\51\1\17\1\10\5\0"+
    "\1\25\1\52\6\0\12\10\1\0\5\17\3\0\1\261"+
    "\54\0\2\10\1\262\10\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\12\10\1\0\5\17"+
    "\1\0\2\10\1\263\10\10\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\12\10\1\0\5\17"+
    "\1\0\13\10\2\0\1\50\1\51\1\17\1\10\5\0"+
    "\1\25\1\52\6\0\2\10\1\264\7\10\1\0\5\17"+
    "\1\0\1\265\12\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\4\10\1\216\6\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\12\10\1\266\2\0\1\50\1\51\1\17\1\10\5\0"+
    "\1\25\1\52\6\0\12\10\1\0\5\17\1\0\4\10"+
    "\1\267\6\10\2\0\1\50\1\51\1\17\1\10\5\0"+
    "\1\25\1\52\6\0\12\10\1\0\5\17\1\0\13\10"+
    "\2\0\1\50\1\51\1\17\1\10\5\0\1\25\1\52"+
    "\6\0\1\201\11\10\1\0\5\17\42\0\1\270\15\0"+
    "\1\10\1\201\11\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\1\10\1\271\11\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\1\10\1\272\11\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\13\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\3\10\1\246\6\10\1\0\5\17\1\0"+
    "\3\10\1\244\7\10\2\0\1\50\1\51\1\17\1\10"+
    "\5\0\1\25\1\52\6\0\12\10\1\0\5\17\1\0"+
    "\13\10\2\0\1\50\1\51\1\17\1\10\5\0\1\25"+
    "\1\52\6\0\1\10\1\207\10\10\1\0\5\17\11\0"+
    "\1\230\46\0\2\10\1\273\10\10\2\0\1\50\1\51"+
    "\1\17\1\10\5\0\1\25\1\52\6\0\12\10\1\0"+
    "\5\17\1\0\12\10\1\274\2\0\1\50\1\51\1\17"+
    "\1\10\5\0\1\25\1\52\6\0\12\10\1\0\5\17";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7755];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\11\1\1\11\4\1\1\11\1\1\2\11"+
    "\4\1\2\11\7\1\1\11\7\1\1\0\12\1\2\0"+
    "\1\11\7\0\2\11\30\1\11\0\27\1\4\0\2\11"+
    "\2\0\26\1\1\0\1\11\1\0\16\1\1\0\10\1"+
    "\1\0\6\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public static ArrayList<ArrayListTokens> tokens;
    public static int contador = -1;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
      this.tokens = new ArrayList<>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   //System.out.println("Fin de archivo encontrado");
  return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Identificador");
    tokens.get(contador).setNombre(yytext());
    return new Symbol(sym.IDENTIFICADOR, new Tokens(yycolumn, yyline, yytext()));
    //System.out.print(" Identificador ");
            }
          case 24: break;
          case 2: 
            { 
            }
          case 25: break;
          case 3: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Espacio en blanco");
    tokens.get(contador).setNombre(yytext());
    return new Symbol(sym.ESPBLANCO, new Tokens(yycolumn, yyline, yytext()));
            }
          case 26: break;
          case 4: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Números");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" Números ");
            }
          case 27: break;
          case 5: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Operador matemático");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" Matemático ");
            }
          case 28: break;
          case 6: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Elemento individual");
    tokens.get(contador).setNombre(yytext());
            }
          case 29: break;
          case 7: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Fin de línea");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" Fin de línea ");
            }
          case 30: break;
          case 8: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Elemento individual");
    tokens.get(contador).setNombre(yytext());
    return new Symbol(sym.DOSPUNTOS, new Tokens(yycolumn, yyline, yytext()));
            }
          case 31: break;
          case 9: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Condiciones");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" Mayor que ");
            }
          case 32: break;
          case 10: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Condiciones");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" Menor que ");
            }
          case 33: break;
          case 11: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Palabra clave");
    tokens.get(contador).setNombre(yytext());
            }
          case 34: break;
          case 12: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Mensaje");
    tokens.get(contador).setNombre(yytext());
            }
          case 35: break;
          case 13: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Condiciones");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" Igual que ");
            }
          case 36: break;
          case 14: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Condiciones");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" Diferente que ");
            }
          case 37: break;
          case 15: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Operador Lógico");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" Lógico ");
            }
          case 38: break;
          case 16: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Comentarios");
    tokens.get(contador).setNombre(yytext());
            }
          case 39: break;
          case 17: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Archivo");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" Archivo excel ");
            }
          case 40: break;
          case 18: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Archivo a incluir");
    tokens.get(contador).setNombre(yytext());
            }
          case 41: break;
          case 19: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Palabra Clave");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" Palabra clave ");
    return new Symbol(sym.PALCLAVCLASE, new Tokens(yycolumn, yyline, yytext() ));
    
    /*for(int i=0; i<=contador; i++){
        System.out.println("Tipo de token: " + tokens.get(i).getTipo_token());
        System.out.println("Tipo de token: " + tokens.get(i).getNombre());
    }*/
    //    System.out.println("Clase");
            }
          case 42: break;
          case 20: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Palabra Clave");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" Palabra clave ");
            }
          case 43: break;
          case 21: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Operación con archivo");
    tokens.get(contador).setNombre(yytext());
            }
          case 44: break;
          case 22: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Tipo de Dato");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" tipo de dato ");
            }
          case 45: break;
          case 23: 
            { tokens.add(new ArrayListTokens());
    contador++;
    tokens.get(contador).setTipo_token("Palabra Clave");
    tokens.get(contador).setNombre(yytext());
    //System.out.print(" Función principal ");
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
